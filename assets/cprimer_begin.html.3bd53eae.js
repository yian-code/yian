import{_ as i,r as c,o as r,c as u,a as n,b as a,w as e,e as o,d as s}from"./app.08bd6425.js";const d={},k=o(`<div class="custom-container tip"><p class="custom-container-title">\u5C0F\u77E5\u8BC6</p><ul><li><code>\\t </code> \u6A2A\u5411\u5236\u8868\u7B26</li><li><code>\\v </code> \u7EB5\u5411\u5236\u8868\u7B26</li><li><code>&#39;M&#39; &quot;Mynote&quot; </code>C++\u5BF9\u5B57\u7B26\u4F7F\u7528\u5355\u5F15\u53F7,\u5BF9\u5B57\u7B26\u4E32\u4F7F\u7528\u53CC\u5F15\u53F7</li><li>\u4E0D\u8981\u6DF7\u6DC6\u7B49\u53F7\u8FD0\u7B97\u7B26<code>==</code>\u548C\u8D4B\u503C\u8FD0\u7B97\u7B26<code>=</code></li><li>\u9017\u53F7\u8FD0\u7B97\u7B26:\u5C06\u4E24\u4E2A\u8868\u8FBE\u5F0F\u5408\u5E76\u4E3A\u4E00\u4E2A</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token operator">++</span>j<span class="token punctuation">,</span><span class="token operator">++</span>i<span class="token punctuation">;</span>
<span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u6570\u7EC4\u540D\u662F\u6570\u7EC4\u7684\u5730\u5740</li></ul></div><h2 id="\u6C42\u6A21\u4E0E\u53D6\u4F59" tabindex="-1"><a class="header-anchor" href="#\u6C42\u6A21\u4E0E\u53D6\u4F59" aria-hidden="true">#</a> \u6C42\u6A21\u4E0E\u53D6\u4F59</h2><ol><li>\u6C42\u6A21\u4E0E\u53D6\u4F59</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">int</span> Lbs_per_stn <span class="token operator">=</span> <span class="token number">14</span>
cin <span class="token operator">&gt;&gt;</span> lbs <span class="token comment">// 181</span>
<span class="token keyword">int</span> stone  <span class="token operator">=</span> lbs <span class="token operator">/</span> Lbs_per_stn<span class="token punctuation">;</span>
<span class="token keyword">int</span> pounds <span class="token operator">=</span> lbs <span class="token operator">%</span> Lbs_per_stn<span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> stone <span class="token operator">&lt;&lt;</span> pounds<span class="token punctuation">;</span>
pounds <span class="token operator">=</span>   <span class="token number">13</span> <span class="token comment">//\u53D6\u4F59</span>
stone <span class="token operator">=</span> <span class="token number">12</span> <span class="token comment">// \u6C42\u6A21</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>\u4E3A\u4EC0\u4E48float \u6BD4double\u7CBE\u5EA6\u4F4E<br> \u901A\u5E38float\u6709\u6548\u4F4D\u657032\u4F4D,double\u6709\u6548\u4F4D\u657064\u4F4D,long double\u4E3A80,96\u6216128\u4F4D</li></ol><h2 id="\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u6570\u7EC4" aria-hidden="true">#</a> \u6570\u7EC4</h2><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>\u4E0D\u80FD\u5C06\u4E00\u4E2A\u6570\u7EC4\u8D4B\u7ED9\u53E6\u4E00\u4E2A\u6570\u7EC4<br> C++\u4E2D\u7684\u6570\u7EC4\u53EA\u6709\u5728\u5B9A\u4E49\u6570\u7EC4\u7684\u65F6\u5019\u624D\u80FD\u4F7F\u7528\u521D\u59CB\u5316</p></div><h4 id="\u521D\u59CB\u5316\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u521D\u59CB\u5316\u6570\u7EC4" aria-hidden="true">#</a> \u521D\u59CB\u5316\u6570\u7EC4</h4><p>\u521D\u59CB\u5316\u6570\u7EC4\u65F6\u53EF\u4EE5\u63D0\u4F9B\u5C11\u4E8E\u6570\u7EC4\u5143\u7D20\u7684\u503C,\u5219\u7F16\u8BD1\u5668\u4F1A\u5C06\u5176\u4ED6\u5143\u7D20\u8BBE\u7F6E\u4E3A0</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">float</span> hotelTip<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u7531\u4E0A\u53EF\u77E5\u5C06\u6570\u7EC4\u4E2D\u7684\u6240\u6709\u5143\u7D20\u90FD\u521D\u59CB\u5316\u4E3A0\u5219--\u53EA\u8981\u663E\u793A\u7684\u5C06\u7B2C\u4E00\u4E2A\u5143\u7D20\u521D\u59CB\u5316\u4E3A0\u5373\u53EF</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">float</span> hotelTip<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u5927\u62EC\u53F7\u4E2D\u4E0D\u5305\u542B\u4EFB\u4F55\u4E1C\u897F\u65F6\u5019,\u8FD9\u5C06\u628A\u6240\u6709\u5143\u7D20\u8BBE\u7F6E\u4E3A0</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">float</span> balances<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">//\u7B49\u53F7\u53EF\u7701\u7565</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u5B57\u7B26\u4E32</h2><h3 id="\u5B57\u7B26\u4E32\u8F93\u5165" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32\u8F93\u5165" aria-hidden="true">#</a> \u5B57\u7B26\u4E32\u8F93\u5165</h3><h4 id="\u9762\u5411\u884C\u7684\u8F93\u5165-getline" tabindex="-1"><a class="header-anchor" href="#\u9762\u5411\u884C\u7684\u8F93\u5165-getline" aria-hidden="true">#</a> \u9762\u5411\u884C\u7684\u8F93\u5165: getline()</h4><p>getline()\u7528\u4E8E\u8BFB\u53D6\u6574\u884C,\u901A\u8FC7\u56DE\u8F66\u952E\u8F93\u5165\u7684\u6362\u884C\u7B26\u6765\u786E\u5B9A\u8F93\u5165\u7ED3\u5C3E,\u8C03\u7528\u5B83\u53EF\u4EE5\u4F7F\u7528cin.getline()</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u4EE5\u4E0A\u8868\u793A\u5C06\u5185\u5BB9\u8BFB\u53D6\u5230\u4E00\u4E2A\u5305\u542B20\u4E2A\u5143\u7D20\u7684name\u6570\u7EC4\u4E2D</p><h4 id="\u9762\u5411\u884C\u7684\u8F93\u5165-get" tabindex="-1"><a class="header-anchor" href="#\u9762\u5411\u884C\u7684\u8F93\u5165-get" aria-hidden="true">#</a> \u9762\u5411\u884C\u7684\u8F93\u5165: get()</h4><p>\u4E0Egetline()\u63A5\u53D7\u7684\u53C2\u6570\u76F8\u540C,\u89E3\u91CA\u53C2\u6570\u7684\u65B9\u5F0F\u4E5F\u76F8\u540C,\u5E76\u4E14\u90FD\u8BFB\u53D6\u5230\u884C\u5C3E,\u4F46\u662Fget\u4E0D\u518D\u8BFB\u53D6\u5E76\u4E22\u5F03\u6362\u884C\u7B26,\u800C\u662F\u5C06\u5176\u7559\u5728\u8F93\u5165\u961F\u5217,\u5047\u5982\u6211\u4EEC\u8FDE\u7EED\u8C03\u7528\u4E24\u6B21git():</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> ArSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dessert<span class="token punctuation">,</span> Arsize<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7531\u4E8E\u7B2C\u4E00\u6B21\u8C03\u7528\u540E\u6362\u884C\u7B26\u7559\u5728\u8F93\u5165\u961F\u5217,\u6240\u4EE5\u7B2C\u4E8C\u6B21\u8C03\u7528\u65F6\u770B\u5230\u7B2C\u4E00\u4E2A\u5B57\u7B26\u4E3A\u6362\u884C\u7B26,\u56E0\u6B64get()\u8BA4\u4E3A\u5DF2\u7ECF\u5230\u8FBE\u884C\u5C3E,\u800C\u6CA1\u6709\u53D1\u73B0\u4EFB\u4F55\u53EF\u8BFB\u5185\u5BB9,\u4E0D\u501F\u52A9\u5E2E\u52A9,\u5B83\u5C06\u4E0D\u80FD\u8DE8\u8FC7\u6362\u884C\u7B26,\u6B64\u65F6\u5E94\u8BE5\u8C03\u7528\u4E00\u6B21\u4E0D\u5E26\u53C2\u6570\u7684cin.get()\u6765\u5904\u7406\u6362\u884C\u7B26</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// cin.get(name, ArSize);</span>
<span class="token comment">// cin.get()</span>
cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> ArSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dessert<span class="token punctuation">,</span> Arsize<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5B57\u7B26\u4E32\u5904\u7406" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32\u5904\u7406" aria-hidden="true">#</a> \u5B57\u7B26\u4E32\u5904\u7406</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">buildstr</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    using namespace std<span class="token punctuation">;</span>
    <span class="token keyword">int</span> times<span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Enter a character: &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> ch<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Enter an integer: &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> times<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>ps <span class="token operator">=</span> <span class="token function">buildstr</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> times<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> ps <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    delete <span class="token punctuation">[</span><span class="token punctuation">]</span> ps<span class="token punctuation">;</span>
    ps <span class="token operator">=</span> <span class="token function">buildstr</span><span class="token punctuation">(</span><span class="token char">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> ps <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;-DONE-&quot;</span> <span class="token operator">&lt;&lt;</span> ps <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    delete <span class="token punctuation">[</span><span class="token punctuation">]</span> ps<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">buildstr</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span> pstr <span class="token operator">=</span> new <span class="token keyword">char</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//\u4ECE\u540E\u5411\u524D\u586B\u5145,\u907F\u514D\u4E86\u4F7F\u7528\u989D\u5916\u7684\u53D8\u91CF</span>
    <span class="token comment">// int i = 0;</span>
    <span class="token comment">// while (i &lt; n)</span>
    <span class="token comment">// {</span>
    <span class="token comment">//     pstr[i++] = c;/* code */</span>
    <span class="token comment">// } </span>
    pstr<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        pstr<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
    <span class="token keyword">return</span> pstr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">c_in_str</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// \u5904\u7406\u5B57\u7B26\u4E32\u4E2D\u5B57\u7B26\u7684\u6807\u51C6\u65B9\u5F0F,\u4F7F\u7528\u5730\u5740\u904D\u5386\u800C\u4E0D\u662F\u53E6\u5916\u4F7F\u7528for\u5FAA\u73AF</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>str<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> ch<span class="token punctuation">)</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
        str<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7ED3\u6784\u7B80\u4ECB" tabindex="-1"><a class="header-anchor" href="#\u7ED3\u6784\u7B80\u4ECB" aria-hidden="true">#</a> \u7ED3\u6784\u7B80\u4ECB</h2>`,28),m={href:"https://blog.csdn.net/weixin_39640298/article/details/84349171",target:"_blank",rel:"noopener noreferrer"},v=s("C++\u4E2DStruct\u4E0EClass\u7684\u533A\u522B\u4E0E\u6BD4\u8F83"),b=o(`<ol><li>struct<br> \u4E0D\u540C\u4E8E\u6570\u7EC4,\u5B83\u53EF\u4EE5\u540C\u65F6\u5B58\u50A8\u4E0D\u540C\u7C7B\u578B\u7684\u5143\u7D20</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">inflatable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> volume<span class="token punctuation">;</span>
    <span class="token keyword">double</span> price<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">//   ;\u7ED3\u675F\u7ED3\u6784\u4F53\u58F0\u660E</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C++\u4E0D\u63D0\u5021\u4F7F\u7528\u5916\u90E8\u53D8\u91CF,\u4F46\u63D0\u5021\u4F7F\u7528\u5916\u90E8\u7ED3\u6784\u58F0\u660E.\u53E6\u5916,\u5728\u5916\u90E8\u58F0\u660E\u7B26\u53F7\u5E38\u91CF\u901A\u5E38\u66F4\u5408\u7406 2. \u7ED3\u6784\u521D\u59CB\u5316 \u4E0E\u6570\u7EC4\u4E00\u6837,C++\u652F\u6301\u5C06\u5217\u8868\u521D\u59CB\u5316\u7528\u4E8E\u7ED3\u6784</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>inflatable duck <span class="token punctuation">{</span><span class="token string">&quot;Daphne&quot;</span><span class="token punctuation">,</span> <span class="token number">0.12</span><span class="token punctuation">,</span> <span class="token number">9.98</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">\u53EF\u7528\u4E8E\u51FD\u6570\u4F20\u5165\u6216\u8FD4\u56DE\u591A\u503C,C++\u4F7F\u7528\u8005\u53EF\u4EE5\u5C06\u7ED3\u6784\u4F5C\u4E3A\u53C2\u6570\u4F20\u9012\u7ED9\u51FD\u6570,\u4E5F\u53EF\u4EE5\u8BA9\u51FD\u6570\u8FD4\u56DE\u4E00\u4E2A\u7ED3\u6784</p></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">struct</span> <span class="token class-name">inflatable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> volume<span class="token punctuation">;</span>
    <span class="token keyword">double</span> price<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    using namespace std<span class="token punctuation">;</span>
    inflatable bouquet <span class="token operator">=</span> 
    <span class="token punctuation">{</span>
        <span class="token string">&quot;sunflowers&quot;</span><span class="token punctuation">,</span>
        <span class="token number">0.20</span><span class="token punctuation">,</span>
        <span class="token number">12.49</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    inflatable choice<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;bouquet: &quot;</span> <span class="token operator">&lt;&lt;</span> bouquet<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; for $&quot;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> bouquet<span class="token punctuation">.</span>price <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    choice <span class="token operator">=</span> bouquet<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;choice: &quot;</span> <span class="token operator">&lt;&lt;</span> choice<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span><span class="token string">&quot; for $&quot;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> choice<span class="token punctuation">.</span>price <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// bouquet: sunflowers for $12.49</span>
<span class="token comment">// choice: sunflowers for $12.49</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>\u5171\u7528\u4F53(union)</li><li>\u679A\u4E3E(enum)</li></ol><h2 id="\u6307\u9488" tabindex="-1"><a class="header-anchor" href="#\u6307\u9488" aria-hidden="true">#</a> \u6307\u9488</h2><ol><li>\u5B9A\u4E49\u6307\u9488<br> *\u8FD0\u7B97\u7B26\u4E24\u8FB9\u7684\u7A7A\u683C\u662F\u53EF\u9009\u7684</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span><span class="token operator">*</span>ptr<span class="token punctuation">;</span>   <span class="token comment">// \u4E5F\u53EF\u4EE5,\u4E3A\u4E86\u89C4\u8303\u4E0D\u8981\u7528</span>
<span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
<span class="token comment">// \u73B0\u5728\u591A\u6570\u8FD9\u4E48\u4F7F\u7528,\u8FD9\u6837\u5F3A\u8C03\u7684\u662Fint*\u662F\u4E00\u79CD\u7C7B\u578B--\u6307\u5411int\u7684\u6307\u9488</span>
<span class="token keyword">int</span><span class="token operator">*</span> ptr<span class="token punctuation">;</span> 
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line">\xA0</div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">\u4E0B\u9762\u58F0\u660E\u521B\u5EFA\u4E86\u4E00\u4E2A\u6307\u9488(p1)\u548C\u4E00\u4E2Aint\u7C7B\u578B\u53D8\u91CF(p2)</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span><span class="token operator">*</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">;</span>  <span class="token comment">// \u5BF9\u6BCF\u4E2A\u6307\u9488\u53D8\u91CF\u540D\u90FD\u9700\u8981\u4F7F\u7528\u4E00\u4E2A *</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><ol start="2"><li>\u53EF\u4EE5\u5728\u58F0\u660E\u8BED\u53E5\u4E2D\u521D\u59CB\u5316\u6307\u9488,\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B,\u88AB\u521D\u59CB\u5316\u7684\u662F\u6307\u9488,\u800C\u4E0D\u662F\u5B83\u6307\u5411\u7684\u503C</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// \u5C06pt(\u800C\u4E0D\u662F*pt)\u7684\u503C\u8BBE\u7F6E\u4E3A&amp;height</span>
<span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">*</span> pt <span class="token operator">=</span> <span class="token operator">&amp;</span>height<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">\u4E00\u5B9A\u8981\u5728\u5BF9\u6307\u9488\u5E94\u7528\u89E3\u9664\u5F15\u7528\u8FD0\u7B97\u7B26(*)\u4E4B\u524D,\u5C06\u6307\u521D\u59CB\u5316\u4E3A\u4E00\u4E2A\u786E\u5B9A\u7684,\u9002\u5F53\u7684\u5730\u5740,\u8FD9\u662F\u5173\u4E8E\u6307\u9488\u7684\u91D1\u79D1\u7389\u5F8B</p></div><ol start="3"><li>\u4F7F\u7528new\u6765\u5206\u914D\u5185\u5B58</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token operator">*</span> pt <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token operator">*</span> ptn <span class="token operator">=</span> new <span class="token keyword">double</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>\u4F7F\u7528delete\u91CA\u653E\u5185\u5B58</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token operator">*</span> ps <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">;</span>
\xB7\xB7\xB7
delete ps<span class="token punctuation">;</span>   <span class="token comment">//\u91CA\u653E\u6307\u9488\u6307\u5411\u7684\u5185\u5B58,\u4E0D\u4F1A\u5220\u9664\u6307\u9488ps\u672C\u8EAB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">\u4E00\u5B9A\u8981\u914D\u5BF9\u4F7F\u7528new\u548Cdelete,\u5426\u5219\u5C06\u53D1\u751F\u5185\u5B58\u6CC4\u6F0F(memory leak)</p></div><ol start="5"><li>\u4F7F\u7528new\u6765\u521B\u5EFA\u52A8\u6001\u6570\u7EC4</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    using namespace std<span class="token punctuation">;</span>
    <span class="token keyword">double</span> <span class="token operator">*</span> p3 <span class="token operator">=</span> new <span class="token keyword">double</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    p3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span>
    p3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
    p3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.8</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;p3[1] is &quot;</span> <span class="token operator">&lt;&lt;</span> p3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;.\\n&quot;</span><span class="token punctuation">;</span>
    p3 <span class="token operator">=</span> p3 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;now p3[0] is &quot;</span> <span class="token operator">&lt;&lt;</span> p3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;and&quot;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;p3[1] is &quot;</span> <span class="token operator">&lt;&lt;</span> p3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;.\\n&quot;</span><span class="token punctuation">;</span>
    p3 <span class="token operator">=</span> p3 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    delete <span class="token punctuation">[</span><span class="token punctuation">]</span> p3<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// p3[1] is 0.5.</span>
<span class="token comment">// now p3[0] is 0.5 and p3[1] is 0.8.</span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4EE5\u4E0B\u7A0B\u5E8F\u8BF4\u660EC++\u5C06\u6570\u7EC4\u540D\u89E3\u91CA\u4E3A\u5730\u5740</p>`,22),g=n("div",{class:"language-c ext-c line-numbers-mode"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`
`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    using namespace std`),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"double"),s(" wages"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"10000.0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"20000.0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"30000.0"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"short"),s(" stack"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"double"),s(),n("span",{class:"token operator"},"*"),s(" pw "),n("span",{class:"token operator"},"="),s(" wages"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"short"),s(),n("span",{class:"token operator"},"*"),s(" ps "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"&"),s("stack"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`

    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"pw = "'),s(),n("span",{class:"token operator"},"<<"),s(" pw "),n("span",{class:"token operator"},"<<"),n("span",{class:"token string"},'", *pw = "'),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token operator"},"*"),s("pw "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    pw `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),n("span",{class:"token string"},'"add 1 to the pw pointer:\\n"'),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"pw = "'),s(),n("span",{class:"token operator"},"<<"),s(" pw "),n("span",{class:"token operator"},"<<"),n("span",{class:"token string"},'", *pw = "'),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token operator"},"*"),s("pw "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"\\n\\n"'),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"ps = "'),s(),n("span",{class:"token operator"},"<<"),s(" ps "),n("span",{class:"token operator"},"<<"),n("span",{class:"token string"},'", *ps = "'),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token operator"},"*"),s("ps "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    ps `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),n("span",{class:"token string"},'"add 1 to the ps pointer:\\n"'),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"ps = "'),s(),n("span",{class:"token operator"},"<<"),s(" ps "),n("span",{class:"token operator"},"<<"),n("span",{class:"token string"},'", *ps = "'),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token operator"},"*"),s("ps "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"\\n\\n"'),n("span",{class:"token punctuation"},";"),s(`

    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"stack[0] = "'),s(),n("span",{class:"token operator"},"<<"),s(" stack"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(`
            `),n("span",{class:"token operator"},"<<"),n("span",{class:"token string"},'", stack[1] = "'),s(),n("span",{class:"token operator"},"<<"),s(" stack"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"\\n"'),n("span",{class:"token punctuation"},";"),s(`
    
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"*stack = "'),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token operator"},"*"),s(`stack
        `),n("span",{class:"token operator"},"<<"),n("span",{class:"token string"},'", *(stack + 1) = "'),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("stack "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),s("wages"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"= size of wages array\\n"'),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),s("pw"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"size of pw pointer\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("div",{class:"language-c ext-c line-numbers-mode"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token comment"},`/*
pw = 0x7fffffffdc30, *pw = 10000
add 1 to the pw pointer:
pw = 0x7fffffffdc38, *pw = 20000

ps = 0x7fffffffdc2a, *ps = 3
add 1 to the ps pointer:
ps = 0x7fffffffdc2c, *ps = 2

stack[0] = 3, stack[1] = 2
*stack = 3, *(stack + 1) = 2
24= size of wages array
8size of pw pointer
*/`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=o(`<h4 id="\u4F7F\u7528\u6307\u9488\u5BF9char\u7C7B\u578B\u8FDB\u884C\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u6307\u9488\u5BF9char\u7C7B\u578B\u8FDB\u884C\u904D\u5386" aria-hidden="true">#</a> \u4F7F\u7528\u6307\u9488\u5BF9char\u7C7B\u578B\u8FDB\u884C\u904D\u5386</h4><div class="custom-container tip"><p class="custom-container-title">\u8BB0\u4F4F&quot;bear&quot;\u5B9E\u9645\u4E0A\u8868\u793A\u7684\u662F\u5B57\u7B26\u4E32\u7684\u5730\u5740</p></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    using std<span class="token operator">::</span>cout<span class="token punctuation">;</span>
    using std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token comment">// \u76F4\u63A5\u7528\u6307\u9488\u6307\u5411\u5B57\u7B26\u4E32,\u8FD9\u6837\u624D\u80FD\u4FEE\u6539\u6307\u5411\u5B57\u7B26\u4E32\u6307\u9488\u7684\u503C</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>ch <span class="token operator">=</span> <span class="token string">&quot;bear&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// char ch[14] = &quot;bear&quot;;  \u8FD9\u6837*ch\u4E0D\u53EF\u4FEE\u6539</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ch <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> ch <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>ch<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ch <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>ch<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u9012\u589E\u4E0E\u9012\u51CF\u8FD0\u7B97\u7B26" tabindex="-1"><a class="header-anchor" href="#\u9012\u589E\u4E0E\u9012\u51CF\u8FD0\u7B97\u7B26" aria-hidden="true">#</a> \u9012\u589E\u4E0E\u9012\u51CF\u8FD0\u7B97\u7B26</h2><p><strong>++a\u4E0Ea++\u7684\u533A\u522B</strong></p><div class="custom-container tip"><p class="custom-container-title">\u7B80\u5355\u7684\u8BB2:a++\u662F\u5148\u8FDB\u884C\u8FD0\u7B97\u518D\u81EA\u589E,++a\u662F\u5148\u81EA\u589E\u518D\u53C2\u4E0E\u8FD0\u7B97</p></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    using std<span class="token operator">::</span>cout<span class="token punctuation">;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;a  = &quot;</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;:  b = &quot;</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;a++  = &quot;</span> <span class="token operator">&lt;&lt;</span> a<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;:  ++b = &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;a  = &quot;</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;:  b = &quot;</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 
a  = 20:  b = 20
a++  = 20:  ++b = 21
a  = 21:  b = 21
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53EF\u4EE5\u5C06\u9012\u589E\u8FD0\u7B97\u7B26\u7528\u4E8E\u6307\u9488\u548C\u57FA\u672C\u53D8\u91CF</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">double</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token number">3.2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5.4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token operator">*</span>pt <span class="token operator">=</span> arr<span class="token punctuation">;</span>
<span class="token operator">++</span>pt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="strcmp-\u51FD\u6570\u5224\u65AD\u4E24\u5B57\u7B26\u4E32\u662F\u5426\u76F8\u540C" tabindex="-1"><a class="header-anchor" href="#strcmp-\u51FD\u6570\u5224\u65AD\u4E24\u5B57\u7B26\u4E32\u662F\u5426\u76F8\u540C" aria-hidden="true">#</a> strcmp()\u51FD\u6570\u5224\u65AD\u4E24\u5B57\u7B26\u4E32\u662F\u5426\u76F8\u540C</h2><p>C-\u98CE\u683C\u5B57\u7B26\u4E32\u5E93\u51FD\u6570,\u8BE5\u51FD\u6570\u63A5\u53D7\u4E24\u4E2A\u5B57\u7B26\u4E32\u5730\u5740\u4F5C\u4E3A\u53C2\u6570,\u8FD9\u610F\u5473\u7740\u53C2\u6570\u53EF\u4EE5\u662F\u6307\u9488\u3001\u5B57\u7B26\u4E32\u5E38\u91CF\u3001\u6216\u5B57\u7B26\u4E32\u6570\u7EC4\u540D. <strong>\u5982\u679C\u4E24\u4E2A\u5B57\u7B26\u4E32\u76F8\u540C,\u8BE5\u51FD\u6570\u5C06\u8FD4\u56DE\u96F6</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    using namespace std<span class="token punctuation">;</span>
    <span class="token keyword">char</span> word<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;?ate&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token string">&quot;mate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ch<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> word <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;After loop ends, word is: &quot;</span> <span class="token operator">&lt;&lt;</span> word <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0B\u9762\u4EE3\u7801\u4E0E\u4E0A\u9762\u8FD0\u884C\u7ED3\u679C\u4E00\u6837,\u4F46\u662F\u662F\u4F7F\u7528\u7684string\u7C7B\u5B57\u7B26\u4E32\u800C\u4E0D\u662FC-\u98CE\u683C\u5B57\u7B26\u4E32</p>`,13),f=n("div",{class:"language-c ext-c line-numbers-mode"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<string>")]),s(`
`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    using namespace std`),n("span",{class:"token punctuation"},";"),s(`
    string word `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"?ate"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"char"),s(" ch "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token char"},"'a'"),n("span",{class:"token punctuation"},";"),s(" word "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token string"},'"mate"'),n("span",{class:"token punctuation"},";"),s(" ch"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(" word "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
        word`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" ch"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"After loop ends, word is: "'),s(),n("span",{class:"token operator"},"<<"),s(" word "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"},"\xA0"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("div",{class:"language-c ext-c line-numbers-mode"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token comment"},`/* ?ate
aate
bate
cate
date
eate
fate
gate
hate
iate
jate
kate
late
After loop ends, word is: mate */`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=o(`<h2 id="\u7F16\u5199\u5EF6\u65F6\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u7F16\u5199\u5EF6\u65F6\u51FD\u6570" aria-hidden="true">#</a> \u7F16\u5199\u5EF6\u65F6\u51FD\u6570</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">long</span> wait <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>wait <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">)</span>
    wait<span class="token operator">++</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5934\u6587\u4EF6ctime\u4E2D\u63D0\u4F9B\u4E86\u89E3\u51B3\u7B56\u7565,\u9996\u5148\u5B83\u5B9A\u4E49\u4E86\u4E00\u4E2A\u7B26\u53F7\u5E38\u91CF<code>CLOCKS_PER_SEC</code>,\u8BE5\u5E38\u91CF\u7B49\u4E8E\u6BCF\u79D2\u949F\u5305\u542B\u7684\u7CFB\u7EDF\u65F6\u95F4\u5355\u4F4D\u6570,\u56E0\u6B64\u5C06\u7CFB\u7EDF\u65F6\u95F4\u9664\u4EE5\u8FD9\u4E2A\u503C\u6216\u8005\u5C06\u79D2\u6570\u4E58\u4EE5<code>CLOCKS_PER_SEC</code>,\u53EF\u4EE5\u5F97\u5230\u4EE5\u7CFB\u7EDF\u65F6\u95F4\u4E3A\u5355\u4F4D\u7684\u65F6\u95F4,\u5176\u6B21ctime\u5C06clock_t\u4F5C\u4E3Aclock()\u8FD4\u56DE\u7C7B\u578B\u7684\u522B\u540D:\u4EE5\u4E0B\u6F14\u793A\u4F7F\u7528clock()\u521B\u5EFA\u7684\u5EF6\u65F6\u51FD\u6570</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctime&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    using namespace std<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Enter the delay time, in seconds: &quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> secs<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> secs<span class="token punctuation">;</span>
    <span class="token class-name">clock_t</span> delay <span class="token operator">=</span> secs <span class="token operator">*</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;staring\\a\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">clock_t</span> start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">&lt;</span> delay<span class="token punctuation">)</span>
        <span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;done \\a\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4F7F\u7528clock-\u8BA1\u65F6" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528clock-\u8BA1\u65F6" aria-hidden="true">#</a> \u4F7F\u7528clock()\u8BA1\u65F6</h2>`,5),x={href:"https://blog.csdn.net/codedz/article/details/80387001",target:"_blank",rel:"noopener noreferrer"},q=s("clock()"),C=s(" \u51FD\u6570\u8FD4\u56DE\u4ECE\u201C\u5F00\u542F\u8FD9\u4E2A\u7A0B\u5E8F\u8FDB\u7A0B\u201D\u5230\u201C\u7A0B\u5E8F\u4E2D\u8C03\u7528clock()\u51FD\u6570\u201D\u65F6\u4E4B\u95F4\u7684CPU\u65F6\u949F\u8BA1\u65F6\u5355\u5143(clock tick)\u6570"),E=o(`<h4 id="eg" tabindex="-1"><a class="header-anchor" href="#eg" aria-hidden="true">#</a> eg:</h4><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token class-name">clock_t</span> start<span class="token punctuation">,</span>end<span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	start<span class="token operator">=</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//\u7A0B\u5E8F\u5F00\u59CB\u8BA1\u65F6</span>
	<span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1e8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
		ans<span class="token operator">++</span><span class="token punctuation">;</span>
	end<span class="token operator">=</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//\u7A0B\u5E8F\u7ED3\u675F\u7528\u65F6</span>
	<span class="token keyword">double</span> endtime<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">/</span>CLOCKS_PER_SEC<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;Total time:&quot;</span><span class="token operator">&lt;&lt;</span>endtime<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>		<span class="token comment">//s\u4E3A\u5355\u4F4D</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;Total time:&quot;</span><span class="token operator">&lt;&lt;</span>endtime<span class="token operator">*</span><span class="token number">1000</span><span class="token operator">&lt;&lt;</span><span class="token string">&quot;ms&quot;</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>	<span class="token comment">//ms\u4E3A\u5355\u4F4D</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u57FA\u4E8E\u8303\u56F4\u7684for\u5FAA\u73AF-range-based" tabindex="-1"><a class="header-anchor" href="#\u57FA\u4E8E\u8303\u56F4\u7684for\u5FAA\u73AF-range-based" aria-hidden="true">#</a> \u57FA\u4E8E\u8303\u56F4\u7684for\u5FAA\u73AF(range-based)</h2><p><strong>\u7B80\u5316\u4E86\u4E00\u79CD\u5E38\u89C1\u7684\u5FAA\u73AF\u4EFB\u52A1:\u5BF9\u6570\u7EC4(\u6216\u5BB9\u5668\u7C7B,\u5982vector\u548Carray)\u7684\u6BCF\u4E2A\u5143\u7D20\u6267\u884C\u76F8\u540C\u7684\u64CD\u4F5C:</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> price<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4.2</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">6.5</span><span class="token punctuation">,</span> <span class="token number">5.7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token operator">:</span> price<span class="token punctuation">)</span>
        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 4.2
3.4
4.5
6.5
5.7 */</span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">\u4F46\u662F\u5982\u679C\u8981\u4FEE\u6539\u6570\u7EC4\u4E2D\u7684\u5143\u7D20,\u9700\u8981\u4F7F\u7528\u4E0D\u540C\u7684\u5FAA\u73AF\u53D8\u91CF\u7684\u8BED\u6CD5:</p></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">&amp;</span>x <span class="token operator">:</span> price<span class="token punctuation">)</span>
<span class="token comment">// \u7B26\u53F7&amp;\u8868\u793Ax\u662F\u4E00\u4E2A\u5F15\u7528\u53D8\u91CF,\u8FD9\u6837\u624D\u80FD\u4FEE\u6539\u6570\u7EC4,\u800C\u4E0A\u9762\u7684\u4EE3\u7801\u4E0D\u80FD</span>
    x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">0.80</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><div class="highlight-line">\xA0</div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u8FD8\u53EF\u4EE5\u7ED3\u5408\u4F7F\u7528\u57FA\u4E8E\u8303\u56F4\u7684for\u5FAA\u73AF\u548C\u521D\u59CB\u5316\u5217\u8868:\u8FD9\u79CD\u5FAA\u73AF\u4E3B\u8981\u7528\u4E8E\u6A21\u677F\u5BB9\u5668\u7C7B</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 3 5 2 8 6 </span>
</code></pre><div class="highlight-lines"><div class="highlight-line">\xA0</div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5B57\u7B26\u4E32\u51FD\u6570\u5E93cctype" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32\u51FD\u6570\u5E93cctype" aria-hidden="true">#</a> \u5B57\u7B26\u4E32\u51FD\u6570\u5E93cctype</h2><p>cctype\u51FD\u6570\u5E93\u53EF\u4EE5\u7B80\u5316\u786E\u5B9A\u5B57\u7B26\u662F\u5426\u4E3A\u5927\u5199\u5B57\u6BCD\u3001\u6570\u5B57\u3001\u6807\u70B9\u7B26\u53F7\u7B49\u5DE5\u4F5C,\u8FD9\u4E9B\u51FD\u6570\u7684\u539F\u578B\u5728\u5934\u6587\u4EF6cctype\u4E2D\u5B9A\u4E49\u7684</p><table><thead><tr><th>\u51FD\u6570\u540D\u79F0</th><th>\u8FD4\u56DE\u503C</th></tr></thead><tbody><tr><td>isalnum()</td><td>\u5982\u679C\u62EC\u53F7\u5185\u53C2\u6570\u662F\u5B57\u6BCD\u6216\u6570\u5B57,\u51FD\u6570\u5C31\u8FD4\u56DEtrue,\u5426\u5219\u8FD4\u56DEfalse</td></tr><tr><td>isalpha()</td><td>\u5982\u679C\u53C2\u6570\u662F\u5B57\u6BCD,\u51FD\u6570\u8FD4\u56DEtrue, \u5426\u5219\u8FD4\u56DEfalse</td></tr><tr><td>islower()</td><td>\u5982\u679C\u53C2\u6570\u662F\u5C0F\u5199\u5B57\u6BCD,\u51FD\u6570\u8FD4\u56DEtrue,\u901A\u5E38\u6211\u4EEC\u4E5F\u53EF\u4EE5\u8FD9\u6837\u5224\u65AD\u5C0F\u5199\u5B57\u6BCD c &gt;= &#39;a&#39; &amp;&amp; c &lt;= &#39;z&#39;</td></tr><tr><td>isupper()</td><td>\u5982\u679C\u53C2\u6570\u662F\u5927\u5199\u5B57\u6BCD,\u51FD\u6570\u8FD4\u56DEtrue,\u901A\u5E38\u6211\u4EEC\u4E5F\u53EF\u4EE5\u8FD9\u6837\u5224\u65AD\u5927\u5199\u5B57\u6BCD c &gt;= &#39;A&#39; &amp;&amp; c &lt;= &#39;Z&#39;</td></tr><tr><td>isdigit()</td><td>\u5982\u679C\u53C2\u6570\u662F\u6570\u5B57,\u51FD\u6570\u8FD4\u56DEtrue,\u901A\u5E38\u6211\u4EEC\u4E5F\u53EF\u4EE5\u8FD9\u6837\u5224\u65AD\u6570\u5B57 c &gt;= &#39;0&#39; &amp;&amp; c &lt;= &#39;9&#39;</td></tr><tr><td>isxdigit()</td><td>\u5982\u679C\u53C2\u6570\u662F\u5341\u516D\u8FDB\u5236\u6570\u5B57,\u53730 ~ 9,a ~ f\u6216A ~ F,\u51FD\u6570\u8FD4\u56DEtrue</td></tr><tr><td>ispunct()</td><td>\u5982\u679C\u53C2\u6570\u662F\u6807\u70B9\u7B26\u53F7,\u51FD\u6570\u8FD4\u56DEtrue</td></tr><tr><td>iscntrl()</td><td>\u5982\u679C\u53C2\u6570\u662F\u63A7\u5236\u5B57\u7B26,\u51FD\u6570\u8FD4\u56DEtrue</td></tr><tr><td>isgraph()</td><td>\u5982\u679C\u53C2\u6570\u9664\u7A7A\u683C\u4E4B\u5916\u7684\u6253\u5370\u5B57\u7B26,\u51FD\u6570\u8FD4\u56DEtrue</td></tr><tr><td>isprint()</td><td>\u5982\u679C\u53C2\u6570\u662F\u6253\u5370\u5B57\u7B26(\u5305\u62EC\u7A7A\u683C&#39; &#39;),\u51FD\u6570\u8FD4\u56DEtrue</td></tr><tr><td>isspace()</td><td>\u5982\u679C\u53C2\u6570\u662F\u6807\u51C6\u7A7A\u767D\u5B57\u7B26,\u5982\u7A7A\u683C&#39; &#39;\u3001\u6362\u884C\u7B26&#39;\\n&#39;\u3001\u6C34\u5E73\u5236\u8868\u7B26&#39;\\t&#39;\u7B49</td></tr><tr><td>tolower()</td><td>\u5982\u679C\u53C2\u6570\u662F\u5B57\u6BCD(\u65E0\u8BBA\u5927\u5C0F\u5199),\u51FD\u6570\u8FD4\u56DE\u5176\u5C0F\u5199\u5B57\u6BCD,\u5426\u5219\u8FD4\u56DE\u539F\u5B57\u7B26</td></tr><tr><td>toupper()</td><td>\u5982\u679C\u53C2\u6570\u662F\u5B57\u6BCD(\u65E0\u8BBA\u5927\u5C0F\u5199),\u51FD\u6570\u8FD4\u56DE\u5176\u5927\u5199\u5B57\u6BCD,\u5426\u5219\u8FD4\u56DE\u539F\u5B57\u7B26</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>\u4EC0\u4E48\u662F\u63A7\u5236\u5B57\u7B26\uFF1F \u63A7\u5236\u5B57\u7B26\u4E5F\u53EB\u4E0D\u53EF\u89C1\u5B57\u7B26,\u5373ASCII\u7801\u4E2D\u4E0D\u80FD\u6B63\u786E\u6253\u5370\u663E\u793A\u51FA\u6765\u7684\u5B57\u7B26</li><li>\u4EC0\u4E48\u662F\u6253\u5370\u5B57\u7B26\uFF1F \u6253\u5370\u5B57\u7B26\u4E5F\u53EB\u53EF\u89C1\u5B57\u7B26,\u5373ASCII\u7801\u4E2D\u53EF\u4EE5\u6B63\u786E\u6253\u5370\u663E\u793A\u51FA\u6765\u7684\u5B57\u7B26</li></ul></div><h2 id="\u8FD0\u7B97\u7B26" tabindex="-1"><a class="header-anchor" href="#\u8FD0\u7B97\u7B26" aria-hidden="true">#</a> ?:\u8FD0\u7B97\u7B26</h2><p>\u5E38\u7528\u6765\u4EE3\u66FFif else,\u5B83\u662FC++\u4E2D\u552F\u4E00\u7684\u4E00\u4E2A\u9700\u8981\u4E09\u4E2A\u64CD\u4F5C\u6570\u7684\u8FD0\u7B97\u7B26</p>`,15),F=n("div",{class:"language-c ext-c line-numbers-mode"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token number"},"5"),s(),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"3"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token number"},"10"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"12"),s(),n("span",{class:"token comment"},"// 5 > 3 is true,so expression value is 10"),s(`
`),n("span",{class:"token keyword"},"int"),s(" c "),n("span",{class:"token operator"},"="),s(" a "),n("span",{class:"token operator"},">"),s(" b "),n("span",{class:"token operator"},"?"),s(" a "),n("span",{class:"token operator"},":"),s(" b"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("div",{class:"highlight-line"},"\xA0")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=n("div",{class:"language-text ext-text line-numbers-mode"},[n("pre",{class:"language-text"},[n("code",null,`/*
int c;
if (a > b)
    c = a;
else 
    c = b;
*/
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=o('<h2 id="break\u548Ccontinue\u8BED\u53E5" tabindex="-1"><a class="header-anchor" href="#break\u548Ccontinue\u8BED\u53E5" aria-hidden="true">#</a> break\u548Ccontinue\u8BED\u53E5</h2><ul><li>break:<strong>\u7ED3\u675F\u6574\u4E2A\u5FAA\u73AF,\u4E0D\u5728\u5224\u65AD\u5FAA\u73AF\u6761\u4EF6\u6210\u7ACB\u4E0E\u5426</strong></li><li>continue:<strong>\u8DF3\u51FA\u672C\u6B21\u5FAA\u73AF,\u800C\u4E0D\u662F\u7EC8\u6B62\u6574\u4E2A\u5FAA\u73AF</strong></li></ul><div class="custom-container tip"><p class="custom-container-title">\u5C0F\u8D34\u58EB</p><p>break\u53EA\u80FD\u8DF3\u51FA\u4E00\u5C42\u5FAA\u73AF,\u5F53\u6709\u591A\u5C42\u5D4C\u5957\u5FAA\u73AF\u65F6,\u65E0\u6CD5\u4E00\u6B21\u8DF3\u51FA\u6240\u6709\u5FAA\u73AF</p></div><h2 id="\u7B80\u5355\u6587\u4EF6\u8F93\u5165\u8F93\u51FA" tabindex="-1"><a class="header-anchor" href="#\u7B80\u5355\u6587\u4EF6\u8F93\u5165\u8F93\u51FA" aria-hidden="true">#</a> \u7B80\u5355\u6587\u4EF6\u8F93\u5165\u8F93\u51FA</h2><h3 id="\u5199\u5165\u5230\u6587\u672C\u6587\u4EF6" tabindex="-1"><a class="header-anchor" href="#\u5199\u5165\u5230\u6587\u672C\u6587\u4EF6" aria-hidden="true">#</a> \u5199\u5165\u5230\u6587\u672C\u6587\u4EF6</h3>',5),z=n("div",{class:"language-c ext-c line-numbers-mode"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<fstream>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    using namespace std`),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" automobile"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" year"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"double"),s(" a_price"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"double"),s(" d_price"),n("span",{class:"token punctuation"},";"),s(`

    ofstream outFile`),n("span",{class:"token punctuation"},";"),s(`
    outFile`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"open"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"outfile.txt"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Enter the make and model of automobile: "'),n("span",{class:"token punctuation"},";"),s(`
    cin`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getline"),n("span",{class:"token punctuation"},"("),s("automobile"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Enter the model year: "'),n("span",{class:"token punctuation"},";"),s(`
    cin `),n("span",{class:"token operator"},">>"),s(" year"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Enter the original asking price: "'),n("span",{class:"token punctuation"},";"),s(`
    cin `),n("span",{class:"token operator"},">>"),s(" a_price"),n("span",{class:"token punctuation"},";"),s(`
    d_price `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0.913"),s(),n("span",{class:"token operator"},"*"),s(" a_price"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// display information on screen with cout"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(" fixed"),n("span",{class:"token punctuation"},";"),s(`
    cout`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"precision"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    cout`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setf"),n("span",{class:"token punctuation"},"("),s("ios_base"),n("span",{class:"token operator"},"::"),s("showpoint"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Make and mode: "'),s(),n("span",{class:"token operator"},"<<"),s(" automobile "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"year: "'),s(),n("span",{class:"token operator"},"<<"),s(" year "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"was asking $"'),s(),n("span",{class:"token operator"},"<<"),s(" a_price "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Now asking $"'),s(),n("span",{class:"token operator"},"<<"),s(" d_price "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    outFile `),n("span",{class:"token operator"},"<<"),s(" fixed"),n("span",{class:"token punctuation"},";"),s(`
    outFile`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"precision"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    outFile`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setf"),n("span",{class:"token punctuation"},"("),s("ios_base"),n("span",{class:"token operator"},"::"),s("showpoint"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    outFile `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Make and mode: "'),s(),n("span",{class:"token operator"},"<<"),s(" automobile "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    outFile `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"year: "'),s(),n("span",{class:"token operator"},"<<"),s(" year "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    outFile `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"was asking $"'),s(),n("span",{class:"token operator"},"<<"),s(" a_price "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    outFile `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Now asking $"'),s(),n("span",{class:"token operator"},"<<"),s(" d_price "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    outFile`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"close"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("div",{class:"language-c ext-c line-numbers-mode"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token comment"},`/*
Enter the make and model of automobile: Flitz Perky
Enter the model year: 2009
Enter the original asking price: 13500
Make and mode: Flitz Perky
year: 2009
was asking $13500.00
Now asking $12325.50
// outfile.txt:
    Make and mode: Flitz Perky
    year: 2009
    was asking $13500.00
    Now asking $12325.50
*/`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),$=n("h3",{id:"\u8BFB\u53D6\u6587\u672C\u6587\u4EF6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u8BFB\u53D6\u6587\u672C\u6587\u4EF6","aria-hidden":"true"},"#"),s(" \u8BFB\u53D6\u6587\u672C\u6587\u4EF6")],-1),N=n("div",{class:"language-c ext-c line-numbers-mode"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<fstream>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<cstdlib>"),s(),n("span",{class:"token comment"},"//support exit()")]),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"int"),s(" SIZE "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"60"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    using namespace std`),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" filename"),n("span",{class:"token punctuation"},"["),s("SIZE"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    ifstream inFile`),n("span",{class:"token punctuation"},";"),n("span",{class:"token comment"},"//\u521B\u5EFA\u6587\u4EF6\u5BF9\u8C61"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Enter name of data file: "'),n("span",{class:"token punctuation"},";"),s(`
    cin`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getline"),n("span",{class:"token punctuation"},"("),s("filename"),n("span",{class:"token punctuation"},","),s(" SIZE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    inFile`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"open"),n("span",{class:"token punctuation"},"("),s("filename"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("inFile"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"is_open"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Could not open the file"'),s(),n("span",{class:"token operator"},"<<"),s(" filename "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Progream terminating.\\n"'),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"exit"),n("span",{class:"token punctuation"},"("),s("EXIT_FAILURE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"double"),s(" value"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"double"),s(" sum "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0.0"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" count "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`

    inFile `),n("span",{class:"token operator"},">>"),s(" value"),n("span",{class:"token punctuation"},";"),n("span",{class:"token comment"},"//\u4F20\u5165\u7B2C\u4E00\u4E2Avalue"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("inFile"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"good"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token operator"},"++"),s("count"),n("span",{class:"token punctuation"},";"),s(`
        sum `),n("span",{class:"token operator"},"+="),s(" value"),n("span",{class:"token punctuation"},";"),s(`
        inFile `),n("span",{class:"token operator"},">>"),s(" value"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("inFile"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"eof"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token comment"},"//\u5224\u65AD\u662F\u5426\u8BFB\u53D6\u5B8C"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"end of file reached\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("inFile"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fail"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token comment"},"//\u8BFB\u53D6\u5931\u8D25"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Input terminated by data mismatch.\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"else"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Input terminated for unknown reason\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("count "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"No data processed\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"else"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Item read: "'),s(),n("span",{class:"token operator"},"<<"),s(" count "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Sum: "'),s(),n("span",{class:"token operator"},"<<"),s(" sum "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Average: "'),s(),n("span",{class:"token operator"},"<<"),s(" sum "),n("span",{class:"token operator"},"/"),s(" count "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    inFile`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"close"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("div",{class:"language-c ext-c line-numbers-mode"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token comment"},`/*
//data.txt
18 19 18.8 20.9
15 34 19.4
17.5

Enter name of data file: data.txt
end of file reached
Item read: 7
Sum: 145.1
Average: 20.7286
*/`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1);function P(T,M){const l=c("ExternalLinkIcon"),t=c("CodeGroupItem"),p=c("CodeGroup");return r(),u("div",null,[k,n("p",null,[n("a",m,[v,a(l)])]),b,a(p,null,{default:e(()=>[a(t,{title:"\u7A0B\u5E8F"},{default:e(()=>[g]),_:1}),a(t,{title:"\u8FD0\u884C\u7ED3\u679C"},{default:e(()=>[h]),_:1})]),_:1}),w,a(p,null,{default:e(()=>[a(t,{title:"\u7A0B\u5E8F"},{default:e(()=>[f]),_:1}),a(t,{title:"\u8FD0\u884C\u7ED3\u679C"},{default:e(()=>[y]),_:1})]),_:1}),_,n("p",null,[n("a",x,[q,a(l)]),C]),E,a(p,null,{default:e(()=>[a(t,{title:"\u7A0B\u5E8F"},{default:e(()=>[F]),_:1}),a(t,{title:"\u8FD0\u884C\u7ED3\u679C"},{default:e(()=>[S]),_:1})]),_:1}),I,a(p,null,{default:e(()=>[a(t,{title:"\u7A0B\u5E8F"},{default:e(()=>[z]),_:1}),a(t,{title:"\u8FD0\u884C\u7ED3\u679C"},{default:e(()=>[A]),_:1})]),_:1}),$,a(p,null,{default:e(()=>[a(t,{title:"\u7A0B\u5E8F"},{default:e(()=>[N]),_:1}),a(t,{title:"\u8FD0\u884C\u7ED3\u679C"},{default:e(()=>[L]),_:1})]),_:1})])}var G=i(d,[["render",P],["__file","cprimer_begin.html.vue"]]);export{G as default};
