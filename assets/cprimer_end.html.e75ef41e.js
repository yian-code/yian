import{_ as l,r as c,o as i,c as u,b as a,w as e,e as o,a as n,d as s}from"./app.63d6be65.js";const r={},d=o(`<h2 id="\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570" aria-hidden="true">#</a> \u51FD\u6570</h2><h3 id="\u51FD\u6570\u57FA\u672C\u77E5\u8BC6" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u57FA\u672C\u77E5\u8BC6" aria-hidden="true">#</a> \u51FD\u6570\u57FA\u672C\u77E5\u8BC6</h3><h4 id="\u51FD\u6570\u8FD4\u56DE\u503C" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u8FD4\u56DE\u503C" aria-hidden="true">#</a> \u51FD\u6570\u8FD4\u56DE\u503C</h4><p>C++\u8FD4\u56DE\u503C\u7C7B\u578B\u6709\u4E00\u5B9A\u7684\u9650\u5236,<strong>\u4E0D\u80FD\u662F\u6570\u7EC4</strong>,\u4F46\u662F\u53EF\u4EE5\u662F\u5176\u4ED6\u4EFB\u4F55\u7C7B\u578B--\u6574\u578B\u3001\u6D6E\u70B9\u6570\u3001\u6307\u9488\u3001<strong>\u7ED3\u6784\u3001\u5BF9\u8C61</strong>(c++\u4E0D\u80FD\u76F4\u63A5\u8FD4\u56DE\u6570\u7EC4,\u4F46\u662F\u53EF\u4EE5\u5C06\u6570\u7EC4\u4F5C\u4E3A\u7ED3\u6784\u6216\u8005\u5BF9\u8C61\u7EC4\u6210\u90E8\u5206\u6765\u8FD4\u56DE)</p><h4 id="\u51FD\u6570\u539F\u578B" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u539F\u578B" aria-hidden="true">#</a> \u51FD\u6570\u539F\u578B</h4><ol><li>\u51FD\u6570\u539F\u578B:\u63CF\u8FF0\u4E86\u51FD\u6570\u5230\u7F16\u8BD1\u5668\u7684\u63A5\u53E3,\u5C06\u51FD\u6570\u8FD4\u56DE\u503C\u7684\u7C7B\u578B(\u5982\u679C\u6709\u7684\u8BDD)\u4EE5\u53CA\u53C2\u6570\u7684\u7C7B\u578B\u548C\u6570\u91CF\u544A\u8BC9\u7F16\u8BD1\u5668</li><li>\u539F\u578B\u8BED\u6CD5:\u51FD\u6570\u539F\u578B\u662F\u4E00\u6761\u8BED\u53E5,\u5FC5\u987B\u4EE5\u5206\u53F7\u7ED3\u675F,\u6700\u7B80\u5355\u7684\u65B9\u6CD5\u5C31\u662F\u590D\u5236\u51FD\u6570\u5934,</li><li>\u539F\u578B\u529F\u80FD:\u786E\u4FDD\u7F16\u8BD1\u5668\u6B63\u786E\u5904\u7406\u51FD\u6570\u8FD4\u56DE\u503C\u3001\u7F16\u8BD1\u5668\u68C0\u67E5\u4F7F\u7528\u7684\u53C2\u6570\u76EE\u5F55\u662F\u5426\u6B63\u786E\u3001\u7F16\u8BD1\u5668\u68C0\u67E5\u4F7F\u7528\u53C2\u6570\u7C7B\u578B\u662F\u5426\u6B63\u786E,\u4E0D\u6B63\u786E\u5219\u8F6C\u6362\u4E3A\u6B63\u786E\u7684\u7C7B\u578B(\u5982\u679C\u53EF\u80FD\u7684\u8BDD)</li></ol><div class="custom-container tip"><p class="custom-container-title">\u901A\u5E38\u5728\u539F\u578B\u53C2\u6570\u5217\u8868\u4E2D\u53EF\u4EE5\u5305\u542B\u53D8\u91CF\u540D,\u4E5F\u53EF\u4EE5\u4E0D\u5305\u542B.\u539F\u578B\u4E2D\u7684\u53D8\u91CF\u540D\u76F8\u5F53\u4E8E\u5360\u4F4D\u7B26,\u56E0\u6B64\u4E0D\u5FC5\u4E0E\u51FD\u6570\u5B9A\u4E49\u4E2D\u7684\u53D8\u91CF\u540D\u76F8\u540C</p></div><h3 id="\u51FD\u6570\u548C\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u548C\u6570\u7EC4" aria-hidden="true">#</a> \u51FD\u6570\u548C\u6570\u7EC4</h3><p>cookies\u662F\u6570\u7EC4\u540D,\u524D\u9762\u4ECB\u7ECD\u8FC7,C++\u5C06\u6570\u7EC4\u540D\u89E3\u91CA\u4E3A\u5176\u7B2C\u4E00\u4E2A\u5143\u7D20\u7684\u5730\u5740:</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>cookies <span class="token operator">==</span> <span class="token operator">&amp;</span>cookies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u5F53\u6211\u4EEC\u5B9A\u4E49\u51FD\u6570<code>int sum = sum_arr(int arr[], int n)</code>\u65F6\u5019\u771F\u6B63\u7684\u51FD\u6570\u5934\u5E94\u8BE5\u662F\u8FD9\u6837\u7684:</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">sum_arr</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u5C06\u6570\u7EC4\u4F5C\u4E3A\u51FD\u6570\u7684\u53C2\u6570\u610F\u5473\u7740:\u7A0B\u5E8F\u5B9E\u9645\u5E76\u6CA1\u6709\u5C06\u6570\u7EC4\u5185\u5BB9\u4F20\u9012\u7ED9\u51FD\u6570,\u800C\u662F\u5C06\u6570\u7EC4\u7684\u5730\u5740,\u5305\u542B\u5143\u7D20\u79CD\u7C7B\u548C\u5143\u7D20\u6570\u76EE\u63D0\u4F9B\u7ED9\u51FD\u6570</p>`,13),k=n("div",{class:"language-c ext-c line-numbers-mode"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"int"),s(" ArSize "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"8"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"sum_arr"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" arr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" n"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" cookies"),n("span",{class:"token punctuation"},"["),s("ArSize"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"8"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"16"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"32"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"64"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"128"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token operator"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(" cookies "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'" = array address, "'),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token operator"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token keyword"},"sizeof"),s(" cookies "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'" = sizeof cookies\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" sum "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"sum_arr"),n("span",{class:"token punctuation"},"("),s("cookies"),n("span",{class:"token punctuation"},","),s(" ArSize"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token operator"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Total cookies eaten: "'),s(),n("span",{class:"token operator"},"<<"),s(" sum "),n("span",{class:"token operator"},"<<"),s(" std"),n("span",{class:"token operator"},"::"),s("endl"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// \u524D\u9762\u4E09\u4E2A\u5143\u7D20\u7684\u548C,\u63D0\u4F9B\u4E86\u4E00\u4E2A\u5047\u7684\u5143\u7D20\u4E2A\u6570"),s(`
    sum `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"sum_arr"),n("span",{class:"token punctuation"},"("),s("cookies"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token operator"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"First three eaters ate "'),s(),n("span",{class:"token operator"},"<<"),s(" sum "),n("span",{class:"token operator"},"<<"),n("span",{class:"token string"},'"cookies\\n"'),n("span",{class:"token punctuation"},";"),s(` 
    `),n("span",{class:"token comment"},"//\u540E\u9762\u56DB\u4E2A\u5143\u7D20\u7684\u548C,\u63D0\u4F9B\u4E86\u4E00\u4E2A\u5047\u7684\u8D77\u59CB\u4F4D\u548C\u5047\u7684\u5143\u7D20\u4E2A\u6570    "),s(`
    `),n("span",{class:"token comment"},"// sum = sum_arr(cookies + 4, 4);"),s(`
    sum `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"sum_arr"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("cookies"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),n("span",{class:"token comment"},"//\u4E0E\u4E0A\u4E00\u53E5\u542B\u4E49\u76F8\u540C"),s(`
    std`),n("span",{class:"token operator"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Last four eaters ate"'),s(),n("span",{class:"token operator"},"<<"),s(" sum "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'" cookies\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"sum_arr"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" arr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" n"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" total "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token operator"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(" arr "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'" = arr"'),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token operator"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token keyword"},"sizeof"),s(" arr "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'" = sizeof arr\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s("n"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        total `),n("span",{class:"token operator"},"="),s(" total "),n("span",{class:"token operator"},"+"),s(" arr"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" total"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"},"\xA0"),n("div",{class:"highlight-line"},"\xA0"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("div",{class:"language-c ext-c line-numbers-mode"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token comment"},`/*
0x7fffffffdc20 = array address, 32 = sizeof cookies
0x7fffffffdc20 = arr8 = sizeof arr
Total cookies eaten: 255
0x7fffffffdc20 = arr8 = sizeof arr
First three eaters ate 7 cookies
0x7fffffffdc30 = arr8 = sizeof arr
Last four eaters ate240 cookies
*/`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),m=o(`<div class="custom-container tip"><p class="custom-container-title">\u6CE8\u610F\u4F7F\u7528**const**\u4FDD\u62A4\u6570\u7EC4,\u9632\u6B62\u6570\u7EC4\u88AB\u4FEE\u6539,\u9700\u8981\u4FEE\u6539\u65F6\u5219\u4E0D\u52A0const</p><p><code>void array(const double arr[], int n)</code></p></div><h4 id="\u51FD\u6570\u548C\u4E8C\u7EF4\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u548C\u4E8C\u7EF4\u6570\u7EC4" aria-hidden="true">#</a> \u51FD\u6570\u548C\u4E8C\u7EF4\u6570\u7EC4</h4><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u4EE5\u4E8C\u7EF4\u6570\u7EC4\u4F5C\u4E3A\u53C2\u6570\u7684\u51FD\u6570\u539F\u578B</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u53EF\u8BFB\u6027\u66F4\u597D\u7684\u5B9A\u4E49\u5982\u4E0B:</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="\u51FD\u6570\u548Cc-\u98CE\u683C\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u548Cc-\u98CE\u683C\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u51FD\u6570\u548CC-\u98CE\u683C\u5B57\u7B26\u4E32</h3><p><strong>\u5047\u8BBE\u8981\u5C06\u5B57\u7B26\u4E32\u4F5C\u4E3A\u53C2\u6570\u4F20\u9012\u7ED9\u51FD\u6570,\u5219\u8868\u793A\u5B57\u7B26\u4E32\u7684\u65B9\u5F0F\u5982\u4E0B</strong>:</p><ul><li>char\u6570\u7EC4<code>char gost[15] = &quot;galloping&quot;</code></li><li>\u7528\u5F15\u53F7\u62EC\u8D77\u6765\u7684\u5B57\u7B26\u4E32\u5E38\u91CF <code>char * str = &quot;galloping&quot;</code></li><li>\u88AB\u8BBE\u7F6E\u4E3A\u5B57\u7B26\u4E32\u7684\u5730\u5740\u7684char\u6307\u9488<br> \u4E0A\u8FF0\u4E09\u79CD\u7C7B\u578B\u90FD\u662Fchar\u6307\u9488(\u51C6\u786E\u662Fchar*),\u4E0B\u9762\u4F7F\u7528\u6307\u9488\u5BF9char\u7C7B\u578B\u8FDB\u884C\u904D\u5386</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    using std<span class="token operator">::</span>cout<span class="token punctuation">;</span>
    using std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token comment">// \u76F4\u63A5\u7528\u6307\u9488\u6307\u5411\u5B57\u7B26\u4E32,\u8FD9\u6837\u624D\u80FD\u4FEE\u6539\u6307\u5411\u5B57\u7B26\u4E32\u6307\u9488\u7684\u503C</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>ch <span class="token operator">=</span> <span class="token string">&quot;mmmuuullllnnn&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// char ch[14] = &quot;mmmuuullllnnn&quot;;  \u8FD9\u6837*ch\u4E0D\u53EF\u4FEE\u6539</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ch <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> ch <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>ch<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ch <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>ch<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u8FD4\u56DEC-\u98CE\u683C\u5B57\u7B26\u4E32\u7684\u51FD\u6570</strong></p><div class="custom-container danger"><p class="custom-container-title">\u51FD\u6570\u65E0\u6CD5\u8FD4\u56DE\u5B57\u7B26\u4E32,\u4F46\u662F\u53EF\u4EE5\u8FD4\u56DE\u5B57\u7B26\u4E32\u7684\u5730\u5740,\u8FD9\u6837\u505A\u6548\u7387\u66F4\u9AD8</p></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">buildstr</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    using namespace std<span class="token punctuation">;</span>
    <span class="token keyword">int</span> times<span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Enter a character: &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> ch<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Enter an integer: &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> times<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>ps <span class="token operator">=</span> <span class="token function">buildstr</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> times<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> ps <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    delete <span class="token punctuation">[</span><span class="token punctuation">]</span> ps<span class="token punctuation">;</span>
    ps <span class="token operator">=</span> <span class="token function">buildstr</span><span class="token punctuation">(</span><span class="token char">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> ps <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;-DONE-&quot;</span> <span class="token operator">&lt;&lt;</span> ps <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    delete <span class="token punctuation">[</span><span class="token punctuation">]</span> ps<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">buildstr</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span> pstr <span class="token operator">=</span> new <span class="token keyword">char</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//\u4ECE\u540E\u5411\u524D\u586B\u5145,\u907F\u514D\u4E86\u4F7F\u7528\u989D\u5916\u7684\u53D8\u91CF</span>
    <span class="token comment">// int i = 0;</span>
    <span class="token comment">// while (i &lt; n)</span>
    <span class="token comment">// {</span>
    <span class="token comment">//     pstr[i++] = c;/* code */</span>
    <span class="token comment">// } </span>
    pstr<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        pstr<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
    <span class="token keyword">return</span> pstr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
Enter a character: V
Enter an integer: 46
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
++++++++++++++++++++-DONE-++++++++++++++++++++
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u51FD\u6570\u548C\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u548C\u7ED3\u6784" aria-hidden="true">#</a> \u51FD\u6570\u548C\u7ED3\u6784</h3><p>\u51FD\u6570\u53EF\u4EE5\u8FD4\u56DE\u7ED3\u6784,<strong>\u7ED3\u6784\u540D\u53EA\u662F\u7ED3\u6784\u7684\u540D\u79F0,\u8981\u83B7\u53D6\u7ED3\u6784\u7684\u5730\u5740\u5FC5\u987B\u4F7F\u7528\u5730\u5740\u8FD0\u7B97\u7B26&amp;</strong>,\u4F7F\u7528\u7ED3\u6784\u65F6\u5C06\u7ED3\u6784\u4F5C\u4E3A\u53C2\u6570\u4F20\u9012,\u5E76\u5728\u9700\u8981\u7684\u65F6\u5019\u5C06\u7ED3\u6784\u4F5C\u4E3A\u8FD4\u56DE\u503C</p><div class="custom-container warning"><p class="custom-container-title">\u6309\u503C\u4F20\u9012\u7ED3\u6784\u5982\u679C\u7ED3\u6784\u975E\u5E38\u5927,\u590D\u5236\u7ED3\u6784\u4F1A\u589E\u52A0\u5185\u5B58\u8981\u6C42,\u964D\u4F4E\u8FD0\u884C\u901F\u5EA6,\u6240\u4EE5\u503E\u5411\u4E8E\u4F20\u9012\u7ED3\u6784\u7684\u5730\u5740</p></div><p><strong>\u4F20\u9012\u548C\u8FD4\u56DE\u7ED3\u6784</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">travel_time</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> hours<span class="token punctuation">;</span>
    <span class="token keyword">int</span> mins<span class="token punctuation">;</span>
    <span class="token comment">/* data */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
travel_time <span class="token function">sum</span><span class="token punctuation">(</span>travel_time t1<span class="token punctuation">,</span> travel_time t2<span class="token punctuation">)</span><span class="token punctuation">;</span>

travel_time <span class="token function">sum</span><span class="token punctuation">(</span>travel_time t1<span class="token punctuation">,</span> travel_time t2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    travel_time total<span class="token punctuation">;</span>
    total<span class="token punctuation">.</span>mins <span class="token operator">=</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>mins <span class="token operator">+</span> t2<span class="token punctuation">.</span>mins<span class="token punctuation">)</span> <span class="token operator">%</span> Mins_per_hr<span class="token punctuation">;</span>
    total<span class="token punctuation">.</span>hours <span class="token operator">=</span> t1<span class="token punctuation">.</span>hours <span class="token operator">+</span> t2<span class="token punctuation">.</span>hours <span class="token operator">+</span> 
                    <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>mins <span class="token operator">+</span> t2<span class="token punctuation">.</span>mins<span class="token punctuation">)</span> <span class="token operator">/</span> Mins_per_hr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> total<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u53E6\u4E00\u4E2A\u5904\u7406\u7ED3\u6784\u7684\u51FD\u6570\u793A\u4F8B</strong></p><ol><li>\u76F4\u89D2\u5750\u6807</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">rect</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> x<span class="token punctuation">;</span>
    <span class="token keyword">double</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>\u6781\u5750\u6807</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">polar</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> distance<span class="token punctuation">;</span>
    <span class="token keyword">double</span> angle<span class="token punctuation">;</span> <span class="token comment">//    \u4E58\u4EE5180/pi\u8F6C\u5316\u4E3A\u89D2\u5EA6</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u51FD\u6570\u548Cstring\u5BF9\u8C61" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u548Cstring\u5BF9\u8C61" aria-hidden="true">#</a> \u51FD\u6570\u548Cstring\u5BF9\u8C61</h3>`,25),b=n("div",{class:"language-c ext-c line-numbers-mode"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<string>")]),s(`
using namespace std`),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"int"),s(" SIZE "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"display"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(" string sa"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" n"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    string list`),n("span",{class:"token punctuation"},"["),s("SIZE"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Enter your "'),s(),n("span",{class:"token operator"},"<<"),s(" SIZE "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"favorite astronomical sights:\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" SIZE"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(" i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'": "'),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"getline"),n("span",{class:"token punctuation"},"("),s("cin"),n("span",{class:"token punctuation"},","),s("list"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Your list:\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"display"),n("span",{class:"token punctuation"},"("),s("list"),n("span",{class:"token punctuation"},","),s("SIZE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"display"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(" string sa"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" n"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" n"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(" i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'": "'),s(),n("span",{class:"token operator"},"<<"),s("sa"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("div",{class:"language-c ext-c line-numbers-mode"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token comment"},`/*
Enter your 5favorite astronomical sights:
1: origin
2: m13
3: saturn
4: jup
5: moon
Your list:
1: origin
2: m13
3: saturn
4: jup
5: moon
*/`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=o(`<h3 id="\u51FD\u6570\u548Carray\u5BF9\u8C61" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u548Carray\u5BF9\u8C61" aria-hidden="true">#</a> \u51FD\u6570\u548Carray\u5BF9\u8C61</h3><p>\u4E0D\u4F1A\u7528</p><h3 id="\u9012\u5F52" tabindex="-1"><a class="header-anchor" href="#\u9012\u5F52" aria-hidden="true">#</a> \u9012\u5F52</h3><p><strong>\u9012\u5F52:\u51FD\u6570\u81EA\u5DF1\u8C03\u7528\u81EA\u5DF1</strong>,\u4F7F\u7528\u65AD\u70B9\u8C03\u8BD5\u53EF\u4EE5\u8F7B\u677E\u770B\u51FA\u9012\u5F52\u8FD0\u884C\u7684\u6D41\u7A0B</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">recurs</span><span class="token punctuation">(</span>argumentlist<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    statements1
    <span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span>
        <span class="token function">recurs</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
    statements2
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6709\u8DA3\u7684\u662F:if\u4E3Atrue\u65F6,\u6BCF\u4E2Arecurs()\u8C03\u7528\u90FD\u5C06\u6267\u884Cstatements1,\u7136\u540E\u518D\u8C03\u7528recurs(),\u800C\u4E0D\u4F1A\u6267\u884Cstatements2,\u5F53if\u4E3Afalse\u65F6,\u5F53\u524D\u8C03\u7528\u4F1A\u6267\u884Cstatements2,\u6267\u884C\u540E\u7A0B\u5E8F\u63A7\u5236\u6743\u5C06\u8FD4\u56DE\u7ED9\u8C03\u7528\u5B83\u7684recurs(),\u4EE5\u6B64\u7C7B\u63A8.<strong>\u5219\u5F53statements1\u6267\u884C\u5B8C\u540E,statements2\u5C06\u4EE5\u51FD\u6570\u8C03\u7528\u76F8\u53CD\u7684\u987A\u5E8F\u6267\u884C</strong>,\u4EE5\u4E0B\u7A0B\u5E8F\u6F14\u793A\u4E86\u8FD9\u79CD\u884C\u4E3A</p>`,6),y=n("div",{class:"language-c++ ext-c++ line-numbers-mode"},[n("pre",{class:"language-c++"},[n("code",null,`#include <iostream>
void countdown(int n);
int main()
{
    countdown(4);
    return 0;
}
void countdown(int n)
{
    using namespace std;
    cout << "Counting down ... " << n << endl;
    if (n > 0)
        countdown(n-1);
    cout << n << ": Kaboom!\\n";
}
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-c++ ext-c++ line-numbers-mode"},[n("pre",{class:"language-c++"},[n("code",null,`/*
Counting down ... 4
Counting down ... 3
Counting down ... 2
Counting down ... 1
Counting down ... 0
0: Kaboom!
1: Kaboom!
2: Kaboom!
3: Kaboom!
4: Kaboom!
*/
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=o(`<h3 id="\u51FD\u6570\u6307\u9488" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u6307\u9488" aria-hidden="true">#</a> \u51FD\u6570\u6307\u9488</h3><ul><li>\u83B7\u53D6\u51FD\u6570\u7684\u5730\u5740:\u51FD\u6570\u540D\u79F0\u5219\u662F\u51FD\u6570\u5730\u5740</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token function">think</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// thought\u8C03\u7528think,\u5E76\u5C06think\u51FD\u6570\u8FD4\u56DE\u503C\u4F20\u7ED9thought\u51FD\u6570</span>
<span class="token function">thought</span><span class="token punctuation">(</span><span class="token function">think</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
</code></pre><div class="highlight-lines"><br><div class="highlight-line">\xA0</div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u58F0\u660E\u51FD\u6570\u6307\u9488<br> \u4F8B\u5982\u51FD\u6570\u539F\u578B\u662F<code>double pam(int)</code>\u5219\u51FD\u6570\u6307\u9488\u7C7B\u578B\u58F0\u660E\u4E3A:</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4E3A\u4E86\u63D0\u4F9B\u8FD0\u7B97\u7B26\u4F18\u5148\u7EA7\u5FC5\u987B\u628A*pf\u62EC\u8D77\u6765</span>
pf <span class="token operator">=</span> pam<span class="token punctuation">;</span> <span class="token comment">// \u5C06\u51FD\u6570\u5730\u5740\u8D4B\u7ED9\u51FD\u6570\u6307\u9488</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line">\xA0</div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u4F7F\u7528\u51FD\u6570\u6307\u9488\u8C03\u7528\u51FD\u6570</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token function">pam</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4F7F\u7528\u51FD\u6570\u6307\u9488\u8C03\u7528\u51FD\u6570</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line">\xA0</div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u6848\u4F8B</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">double</span> <span class="token function">betsy</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token function">pam</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">estimate</span><span class="token punctuation">(</span><span class="token keyword">int</span> lines<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    using namespace std<span class="token punctuation">;</span>
    <span class="token keyword">int</span> code<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;How many lines of code do you need:   &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> code<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Here&#39;s Betsy&#39;s estimate:   \\n&quot;</span><span class="token punctuation">;</span>
    <span class="token function">estimate</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> betsy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Here&#39;s pam&#39;s estimate:   \\n&quot;</span><span class="token punctuation">;</span>
    <span class="token function">estimate</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> pam<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>

<span class="token punctuation">}</span>
<span class="token keyword">double</span> <span class="token function">betsy</span><span class="token punctuation">(</span><span class="token keyword">int</span> lns<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0.05</span> <span class="token operator">*</span> lns<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">double</span> <span class="token function">pam</span><span class="token punctuation">(</span><span class="token keyword">int</span> lns<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0.03</span> <span class="token operator">*</span> lns <span class="token operator">+</span> <span class="token number">0.0004</span> <span class="token operator">*</span> lns <span class="token operator">*</span> lns<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">estimate</span><span class="token punctuation">(</span><span class="token keyword">int</span> lines<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    using namespace std<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> lines <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;  lines will take   &quot;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;  hour(s)  \\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
How many lines of code do you need:   30
Here&#39;s Betsy&#39;s estimate:   
30  lines will take   1.5  hour(s)  
Here&#39;s pam&#39;s estimate:   
30  lines will take   1.26  hour(s) 
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6DF1\u5165\u63A2\u8BA8\u51FD\u6570\u6307\u9488\u6CA1\u770B" tabindex="-1"><a class="header-anchor" href="#\u6DF1\u5165\u63A2\u8BA8\u51FD\u6570\u6307\u9488\u6CA1\u770B" aria-hidden="true">#</a> \u6DF1\u5165\u63A2\u8BA8\u51FD\u6570\u6307\u9488\u6CA1\u770B</h2><h2 id="\u5185\u5B58\u6A21\u578B\u548C\u540D\u79F0\u7A7A\u95F4" tabindex="-1"><a class="header-anchor" href="#\u5185\u5B58\u6A21\u578B\u548C\u540D\u79F0\u7A7A\u95F4" aria-hidden="true">#</a> \u5185\u5B58\u6A21\u578B\u548C\u540D\u79F0\u7A7A\u95F4</h2><h2 id="\u5BF9\u8C61\u548C\u7C7B" tabindex="-1"><a class="header-anchor" href="#\u5BF9\u8C61\u548C\u7C7B" aria-hidden="true">#</a> \u5BF9\u8C61\u548C\u7C7B</h2><div class="custom-container tip"><p class="custom-container-title">OOP</p><p>\u62BD\u8C61\u3001\u5C01\u88C5\u548C\u6570\u636E\u9690\u85CF\u3001\u591A\u6001\u3001\u7EE7\u627F\u3001\u4EE3\u7801\u7684\u53EF\u91CD\u7528\u6027</p></div><div class="custom-container warning"><p class="custom-container-title">\u7C7B\u4E0E\u7ED3\u6784\u552F\u4E00\u7684\u533A\u522B\u662F:\u7ED3\u6784\u7684\u9ED8\u8BA4\u8BBF\u95EE\u7C7B\u578B\u662Fpublic,\u800C\u7C7B\u4E3Aprivate</p></div><h3 id="\u62BD\u8C61\u548C\u7C7B" tabindex="-1"><a class="header-anchor" href="#\u62BD\u8C61\u548C\u7C7B" aria-hidden="true">#</a> \u62BD\u8C61\u548C\u7C7B</h3><ul><li><strong>\u5B9E\u73B0\u7C7B</strong><br> \u7C7B\u89C4\u8303\u4E00\u822C\u7531\u4E24\u4E2A\u90E8\u5206\u7EC4\u6210-\u7C7B\u58F0\u660E\u3001\u7C7B\u5B9A\u4E49.\u7C7B\u58F0\u660E\u662F\u84DD\u56FE,\u65B9\u6CD5\u5B9A\u4E49\u63D0\u4F9B\u7EC6\u8282</li></ul><ol><li><strong>\u7C7B\u58F0\u660E:\u4EE5\u6570\u636E\u6210\u5458\u7684\u65B9\u5F0F\u63CF\u8FF0\u6570\u636E\u90E8\u5206,\u4EE5\u6210\u5458\u51FD\u6570(\u88AB\u79F0\u4E3A\u65B9\u6CD5)\u7684\u65B9\u5F0F\u63CF\u8FF0\u516C\u6709\u63A5\u53E3</strong></li></ol><details class="custom-container details"><summary>stock00.h</summary><div class="language-c++ ext-c++ line-numbers-mode"><pre class="language-c++"><code>#ifndef STOCK00_H_
#define STOCK00_H_
#include &lt;string&gt;
class Stock
{
    //\u5C06\u6570\u636E\u5C01\u88C5\u5230\u79C1\u6709\u90E8\u5206\u53EF\u4EE5\u4FDD\u62A4\u6570\u636E\u5B8C\u6574\u6027,\u6570\u636E\u9690\u85CF
    //\u53EA\u80FD\u901A\u8FC7\u516C\u6709\u6210\u5458\u8BBF\u95EE,\u5176\u5B9E\u4E0D\u5FC5\u4F7F\u7528(\u6570\u636E\u9690\u85CF),\u8FD9\u662F\u7C7B\u5BF9\u8C61\u7684\u9ED8\u8BA4\u8BBF\u95EE\u63A7\u5236
    private:  
        std::string company;
        long shares;
        double share_val;
        double total_val;
        void set_tot() //\u5185\u8054\u51FD\u6570,\u4E5F\u53EF\u4EE5\u5199\u5728\u5916\u9762
        {
            total_val = shares * share_val;
        } 
        //\u5199\u5728\u7C7B\u5916\u9762\u4E86
        void set_tot_inline_test();
    public:    //\u516C\u5171\u63A5\u53E3\u7684\u7C7B\u6210\u5458\u51FD\u6570
        //\u6784\u9020\u51FD\u6570\u3001\u6790\u6784\u51FD\u6570\u58F0\u660E
        //\u6784\u9020\u51FD\u6570:\u6784\u9020\u5E76\u521D\u59CB\u5316\u5BF9\u8C61
        Stock(const std::string &amp; co, long n = 0, double pr = 0.0);
        //\u6790\u6784\u51FD\u6570:\u5BF9\u8C61\u8FC7\u671F\u65F6\u8C03\u7528,\u7528\u6765\u5B8C\u6210\u6E05\u7406\u5DE5\u4F5C,\u6790\u6784\u51FD\u6570\u6CA1\u6709\u53C2\u6570
        ~Stock();
        //this\u6307\u9488
        const Stock &amp; topval(const Stock &amp; s) const;
        
        void acquire(const std::string &amp; co, long n, double pr);
        void buy(long num, double price);
        void sell(long num, double price);//\u7C7B\u6210\u5458\u53EF\u4EE5\u662F\u6570\u636E\u7C7B\u578B\u4E5F\u53EF\u4EE5\u662F\u51FD\u6570
        void update(double price);
        void show();
};

//\u5199\u5728\u7C7B\u5916\u9762\u7684\u51FD\u6570\u9700\u8981\u52A0\u4E0Ainline\u9650\u5B9A\u7B26(\u5185\u8054\u51FD\u6570)
//\u4E00\u822C\u4E0D\u8981\u76F4\u63A5\u5199\u5728.h\u6587\u4EF6\u4E2D
//\u5199\u5230\u4E13\u95E8\u7684\u7C7B\u6210\u5458\u51FD\u6570\u6587\u4EF6\u4E2D
inline void Stock::set_tot_inline_test()   
{
        total_val = shares * share_val;
}

#endif
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ol start="2"><li><strong>\u7C7B\u65B9\u6CD5\u5B9A\u4E49:\u63CF\u8FF0\u5982\u4F55\u5B9E\u73B0\u7C7B\u6210\u5458\u51FD\u6570</strong></li></ol><details class="custom-container details"><summary>stock00.cpp</summary><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stock00.h&quot;</span></span>
<span class="token comment">//\u4F7F\u7528\u4F5C\u7528\u57DF\u89E3\u6790\u51FD\u6570\u5224\u65AD\u6210\u5458\u51FD\u6570\u5C5E\u4E8E\u54EA\u4E2A\u7C7B</span>
<span class="token keyword">void</span> Stock<span class="token operator">::</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span> co<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> pr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    company <span class="token operator">=</span> co<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;number of shares can&#39;t be negtive&quot;</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;company &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;shares set to 0.\\n &quot;</span><span class="token punctuation">;</span>
        shares <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
        shares <span class="token operator">=</span> n<span class="token punctuation">;</span>
    share_val <span class="token operator">=</span> pr<span class="token punctuation">;</span>
    <span class="token function">set_tot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> Stock<span class="token operator">::</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token keyword">long</span> num<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;number of shares purchased can&#39;t be negative&quot;</span>
                    <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;transaction id aborted.\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        shares <span class="token operator">+=</span> num<span class="token punctuation">;</span>
        share_val <span class="token operator">=</span> price<span class="token punctuation">;</span>
        <span class="token function">set_tot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>
<span class="token keyword">void</span> Stock<span class="token operator">::</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">long</span> num<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    using std<span class="token operator">::</span>cout<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;Number of shares sold can&#39;t be negative&quot;</span>
            <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; Transaction is aborted.\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> shares<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;You can&#39;t sell more than you have!&quot;</span>
                <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; Transaction is aborted.\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        shares <span class="token operator">-=</span>num<span class="token punctuation">;</span>
        share_val <span class="token operator">=</span> price<span class="token punctuation">;</span>
        <span class="token function">set_tot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
<span class="token keyword">void</span> Stock<span class="token operator">::</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Company: &quot;</span> <span class="token operator">&lt;&lt;</span> company
                <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Shares: &quot;</span> <span class="token operator">&lt;&lt;</span> shares <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl
                <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Share Price:  $&quot;</span> <span class="token operator">&lt;&lt;</span> share_val
                <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Share Worth:   $&quot;</span> <span class="token operator">&lt;&lt;</span> total_val <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> Stock<span class="token operator">::</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    share_val <span class="token operator">=</span> price<span class="token punctuation">;</span>
    <span class="token function">set_tot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u521B\u5EFA\u6784\u9020\u51FD\u6570\u521D\u59CB\u5316Stock\u5BF9\u8C61</span>
Stock<span class="token operator">::</span><span class="token function">Stock</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span> co<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> pr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    company <span class="token operator">=</span> co<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;number of shares can&#39;t be negtive&quot;</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;company &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;shares set to 0.\\n &quot;</span><span class="token punctuation">;</span>
        shares <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
        shares <span class="token operator">=</span> n<span class="token punctuation">;</span>
    share_val <span class="token operator">=</span> pr<span class="token punctuation">;</span>
    <span class="token function">set_tot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u521B\u5EFA\u6790\u6784\u51FD\u6570--\u6790\u6784\u51FD\u6570\u4E0D\u627F\u62C5\u5DE5\u4F5C,\u6240\u4EE5\u53EF\u4EE5\u4E0D\u6267\u884C\u4EFB\u4F55\u64CD\u4F5C</span>
<span class="token comment">//\u901A\u5E38\u4E0D\u663E\u5F0F\u8C03\u7528\u6790\u6784\u51FD\u6570</span>
Stock<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//\u4E3A\u4E86\u770B\u6E05\u6790\u6784\u51FD\u6570\u4F55\u65F6\u88AB\u8C03\u7528</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Bye, &quot;</span> <span class="token operator">&lt;&lt;</span> company <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//this\u6307\u9488:\u6307\u5411\u8C03\u7528\u6210\u5458\u51FD\u6570\u7684\u5BF9\u8C61</span>
<span class="token keyword">const</span> Stock <span class="token operator">&amp;</span> Stock<span class="token operator">::</span><span class="token function">topval</span><span class="token punctuation">(</span><span class="token keyword">const</span> Stock <span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
    <span class="token comment">//\u8FD9\u91CC\u9762\u7684total_val\u5176\u5B9E\u662F this-&gt;total_val</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>total_val <span class="token operator">&gt;</span> total_val<span class="token punctuation">)</span>
        <span class="token keyword">return</span> s<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span>
        <span class="token comment">//test git </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li><strong>\u4F7F\u7528\u7C7B</strong><br> \u5C06\u51FD\u6570\u58F0\u660E\u6587\u4EF6\u3001\u7C7B\u6210\u5458\u51FD\u6570\u6587\u4EF6\u3001\u4E3B\u6587\u4EF6\u4E00\u8D77\u7F16\u8BD1,\u751F\u6210\u53EF\u6267\u884C\u6587\u4EF6usestock00.exe</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>g++ -o usestock00.exe usestock00.cpp stock00.h stock00.cpp usestock00.cpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="custom-container details"><summary>\u4E3B\u6587\u4EF6usestock00.cpp</summary><div class="language-c++ ext-c++ line-numbers-mode"><pre class="language-c++"><code>#include &lt;iostream&gt;
#include &quot;stock00.h&quot;
int main()
{   //\u4E3A\u7C7BStock\u521B\u5EFA\u4E00\u4E2A\u540D\u4E3Afu\u7684\u5BF9\u8C61\u5E76\u4F7F\u7528\u6784\u9020\u51FD\u6570Stock\u521D\u59CB\u5316\u7C7B
    //\u5BF9\u8C61\u53EF\u4EE5\u8C03\u7528\u65B9\u6CD5\u4F46\u662F\u4E0D\u80FD\u8C03\u7528\u6784\u9020\u51FD\u6570,\u56E0\u4E3A\u5728\u6784\u9020\u51FD\u6570\u6784\u9020\u51FA\u5BF9\u8C61\u4E4B\u524D,\u5BF9\u8C61\u662F\u4E0D\u5B58\u5728\u7684
    //\u56E0\u6B64\u6784\u9020\u51FD\u6570\u88AB\u7528\u6765\u521B\u5EFA\u5BF9\u8C61,\u800C\u4E0D\u80FD\u901A\u8FC7\u5BF9\u8C61\u8C03\u7528
    //\u663E\u5F0F\u8C03\u7528\u6784\u9020\u51FD\u6570
    Stock fu = Stock(&quot;Furry Mason&quot;, 50, 2.5);
    //\u9690\u5F0F\u8C03\u7528\u6784\u9020\u51FD\u6570
    //Stock fu(&quot;Furry Mason&quot;, 50, 2.5);
    //\u5C06\u6784\u9020\u51FD\u6570\u4E0Enew\u4E00\u8D77\u4F7F\u7528
    // Stock *pstock = new Stock(&quot;Furry Mason&quot;, 50, 2.5);
    //\u521B\u5EFA\u4E00\u4E2AStock\u5BF9\u8C61\u5E76\u5C06\u521D\u59CB\u5316\u4E3A\u53C2\u6570\u63D0\u4F9B\u7684\u503C,\u5E76\u5C06\u8BE5\u5BF9\u8C61\u8D4B\u503C\u7ED9pstock\u6307\u9488
    fu.acquire(&quot;NanoSmart&quot;, 20, 12.50);//\u4F7F\u7528\u7C7B\u6210\u5458\u51FD\u6570
    fu.show();
    fu.buy(15, 18.125);
    fu.show();
    fu.sell(400, 20.00);
    fu.show();
    fu.buy(300000, 40.125);
    fu.show();
    fu.sell(30000, 0.125);
    fu.show();
    return 0;
/*
Company: NanoSmartShares: 20
Share Price:  $12.5Share Worth:   $250
Company: NanoSmartShares: 35
Share Price:  $18.125Share Worth:   $634.375
You can&#39;t sell more than you have! Transaction is aborted.
Company: NanoSmartShares: 35
Share Price:  $18.125Share Worth:   $634.375
Company: NanoSmartShares: 300035
Share Price:  $40.125Share Worth:   $1.20389e+07
Company: NanoSmartShares: 270035
Share Price:  $0.125Share Worth:   $33754.4
Bye, NanoSmart
*/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="\u7C7B\u7684\u6784\u9020\u51FD\u6570\u548C\u6790\u6784\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u7C7B\u7684\u6784\u9020\u51FD\u6570\u548C\u6790\u6784\u51FD\u6570" aria-hidden="true">#</a> \u7C7B\u7684\u6784\u9020\u51FD\u6570\u548C\u6790\u6784\u51FD\u6570</h3><p>\u4E3A\u4E86\u5728\u6784\u9020\u5BF9\u8C61\u540E\u81EA\u52A8\u521D\u59CB\u5316\u5BF9\u8C61,C++\u63D0\u4F9B\u4E86\u4E00\u4E2A\u7279\u6B8A\u7684\u6210\u5458\u51FD\u6570-<strong>\u7C7B\u6784\u9020\u51FD\u6570,\u4E13\u95E8\u7528\u4E8E\u6784\u9020\u65B0\u5BF9\u8C61\u3001\u5C06\u503C\u8D4B\u7ED9\u5B83\u4EEC\u7684\u6570\u636E\u6210\u5458</strong> \u6784\u9020\u51FD\u6570\u6CA1\u6709\u8FD4\u56DE\u503C,\u4F46\u6CA1\u6709\u88AB\u58F0\u660E\u4E3Avoid\u7C7B\u578B,\u5B9E\u9645\u4E0A<strong>\u6784\u9020\u51FD\u6570\u6CA1\u6709\u58F0\u660E\u7C7B\u578B</strong></p><ol><li>\u58F0\u660E\u548C\u5B9A\u4E49\u6784\u9020\u51FD\u6570</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// \u58F0\u660E\u6784\u9020\u51FD\u6570</span>
<span class="token function">Stock</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span> co<span class="token punctuation">,</span> <span class="token keyword">long</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">double</span> pr <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u5B9A\u4E49\u6784\u9020\u51FD\u6570</span>
Stock<span class="token operator">::</span><span class="token function">Stock</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span> co<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> pr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    company <span class="token operator">=</span> co<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;number of shares can&#39;t be negtive&quot;</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;company &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;shares set to 0.\\n &quot;</span><span class="token punctuation">;</span>
        shares <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
        shares <span class="token operator">=</span> n<span class="token punctuation">;</span>
    share_val <span class="token operator">=</span> pr<span class="token punctuation">;</span>
    <span class="token function">set_tot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">\u6784\u9020\u51FD\u6570\u7684\u53C2\u6570\u8868\u793A\u4E0D\u662F\u7C7B\u6210\u5458,\u800C\u662F\u8D4B\u7ED9\u7C7B\u6210\u5458\u7684\u503C,\u6240\u4EE5\u53C2\u6570\u540D\u4E0D\u80FD\u4E0E\u7C7B\u6210\u5458\u76F8\u540C</p></div><ol start="2"><li>\u4F7F\u7528\u6784\u9020\u51FD\u6570<br> \u5BF9\u8C61\u53EF\u4EE5\u8C03\u7528\u65B9\u6CD5\u4F46\u662F\u4E0D\u80FD\u8C03\u7528\u6784\u9020\u51FD\u6570,\u56E0\u4E3A\u5728\u6784\u9020\u51FD\u6570\u6784\u9020\u51FA\u5BF9\u8C61\u4E4B\u524D,\u5BF9\u8C61\u662F\u4E0D\u5B58\u5728\u7684,\u56E0\u6B64<strong>\u6784\u9020\u51FD\u6570\u88AB\u7528\u6765\u521B\u5EFA\u5BF9\u8C61,\u800C\u4E0D\u80FD\u901A\u8FC7\u5BF9\u8C61\u8C03\u7528</strong></li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u663E\u5F0F\u8C03\u7528\u6784\u9020\u51FD\u6570</span>
Stock fu <span class="token operator">=</span> <span class="token function">Stock</span><span class="token punctuation">(</span><span class="token string">&quot;Furry Mason&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u9690\u5F0F\u8C03\u7528\u6784\u9020\u51FD\u6570</span>
Stock <span class="token function">fu</span><span class="token punctuation">(</span><span class="token string">&quot;Furry Mason&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u5C06\u6784\u9020\u51FD\u6570\u4E0Enew\u4E00\u8D77\u4F7F\u7528</span>
Stock <span class="token operator">*</span>pstock <span class="token operator">=</span> new <span class="token function">Stock</span><span class="token punctuation">(</span><span class="token string">&quot;Furry Mason&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*\u521B\u5EFA\u4E00\u4E2AStock\u5BF9\u8C61\u5E76\u5C06\u521D\u59CB\u5316\u4E3A\u53C2\u6570\u63D0\u4F9B\u7684\u503C,\u5E76\u5C06\u8BE5\u5BF9\u8C61\u8D4B\u503C\u7ED9pstock\u6307\u9488,
\u5BF9\u8C61\u6CA1\u6709\u540D\u5B57\u4F46\u662F\u53EF\u4EE5\u7528\u6307\u9488\u6765\u7BA1\u7406*/</span>
</code></pre><div class="highlight-lines"><div class="highlight-line">\xA0</div><br><div class="highlight-line">\xA0</div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>\u9ED8\u8BA4\u6784\u9020\u51FD\u6570</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>Stock<span class="token operator">::</span><span class="token function">Stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>\u6790\u6784\u51FD\u6570<br><strong>\u5BF9\u8C61\u8FC7\u671F\u65F6,\u7A0B\u5E8F\u4F1A\u81EA\u52A8\u8C03\u7528\u6790\u6784\u51FD\u6570\u5B8C\u6210\u6E05\u7406\u5DE5\u4F5C</strong></li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u521B\u5EFA\u6790\u6784\u51FD\u6570--\u6790\u6784\u51FD\u6570\u4E0D\u627F\u62C5\u5DE5\u4F5C,\u6240\u4EE5\u53EF\u4EE5\u4E0D\u6267\u884C\u4EFB\u4F55\u64CD\u4F5C</span>
<span class="token comment">//\u901A\u5E38\u4E0D\u663E\u5F0F\u8C03\u7528\u6790\u6784\u51FD\u6570</span>
Stock<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//\u4E3A\u4E86\u770B\u6E05\u6790\u6784\u51FD\u6570\u4F55\u65F6\u88AB\u8C03\u7528</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Bye, &quot;</span> <span class="token operator">&lt;&lt;</span> company <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">C++11\u4E2D,\u53EF\u4EE5\u5C06\u5217\u8868\u521D\u59CB\u5316\u8BED\u6CD5\u7528\u4E8E\u7C7B</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>Stock tip <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;NanoSmart&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">12.50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="this\u6307\u9488" tabindex="-1"><a class="header-anchor" href="#this\u6307\u9488" aria-hidden="true">#</a> this\u6307\u9488</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//this\u6307\u9488\u58F0\u660E</span>
<span class="token keyword">const</span> Stock <span class="token operator">&amp;</span> <span class="token function">topval</span><span class="token punctuation">(</span><span class="token keyword">const</span> Stock <span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

<span class="token comment">//this\u6307\u9488:\u6307\u5411\u8C03\u7528\u6210\u5458\u51FD\u6570\u7684\u5BF9\u8C61</span>
<span class="token keyword">const</span> Stock <span class="token operator">&amp;</span> Stock<span class="token operator">::</span><span class="token function">topval</span><span class="token punctuation">(</span><span class="token keyword">const</span> Stock <span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
<span class="token comment">//\u8FD9\u91CC\u9762\u7684total_val\u5176\u5B9E\u662F this-&gt;total_val</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>total_val <span class="token operator">&gt;</span> total_val<span class="token punctuation">)</span>
        <span class="token keyword">return</span> s<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span> <span class="token comment">//  *this \u5F15\u7528\u6574\u4E2A\u8C03\u7528\u5BF9\u8C61</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5BF9\u8C61\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u5BF9\u8C61\u6570\u7EC4" aria-hidden="true">#</a> \u5BF9\u8C61\u6570\u7EC4</h3><p>\u521B\u5EFA\u4E00\u4E2A\u5BF9\u8C61\u6570\u7EC4</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>Stock mystock<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,40);function _(q,S){const t=c("CodeGroupItem"),p=c("CodeGroup");return i(),u("div",null,[d,a(p,null,{default:e(()=>[a(t,{title:"\u7A0B\u5E8F"},{default:e(()=>[k]),_:1}),a(t,{title:"\u8FD0\u884C\u7ED3\u679C"},{default:e(()=>[v]),_:1})]),_:1}),m,a(p,null,{default:e(()=>[a(t,{title:"\u7A0B\u5E8F"},{default:e(()=>[b]),_:1}),a(t,{title:"\u8FD0\u884C\u7ED3\u679C"},{default:e(()=>[h]),_:1})]),_:1}),g,a(p,null,{default:e(()=>[a(t,{title:"\u7A0B\u5E8F"},{default:e(()=>[y]),_:1}),a(t,{title:"\u8FD0\u884C\u7ED3\u679C"},{default:e(()=>[w]),_:1})]),_:1}),f])}var V=l(r,[["render",_],["__file","cprimer_end.html.vue"]]);export{V as default};
