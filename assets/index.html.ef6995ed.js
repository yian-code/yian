import{_ as i,r as c,o as u,c as r,b as n,a,w as t,e as p,d as s}from"./app.72515998.js";const d={},k=p(`<h2 id="\u8BB0\u5FC6" tabindex="-1"><a class="header-anchor" href="#\u8BB0\u5FC6" aria-hidden="true">#</a> \u8BB0\u5FC6</h2><ul><li><code>\\t </code> \u6A2A\u5411\u5236\u8868\u7B26</li><li><code>\\v </code> \u7EB5\u5411\u5236\u8868\u7B26</li><li><code>&#39;M&#39; &quot;Mynote&quot; </code>C++\u5BF9\u5B57\u7B26\u4F7F\u7528\u5355\u5F15\u53F7,\u5BF9\u5B57\u7B26\u4E32\u4F7F\u7528\u53CC\u5F15\u53F7</li><li>\u4E0D\u8981\u6DF7\u6DC6\u7B49\u53F7\u8FD0\u7B97\u7B26<code>==</code>\u548C\u8D4B\u503C\u8FD0\u7B97\u7B26<code>=</code></li><li>\u9017\u53F7\u8FD0\u7B97\u7B26:\u5C06\u4E24\u4E2A\u8868\u8FBE\u5F0F\u5408\u5E76\u4E3A\u4E00\u4E2A</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token operator">++</span>j<span class="token punctuation">,</span><span class="token operator">++</span>i<span class="token punctuation">;</span>
<span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u6570\u7EC4\u540D\u662F\u6570\u7EC4\u7684\u5730\u5740</li></ul><h2 id="\u6C42\u6A21\u4E0E\u53D6\u4F59" tabindex="-1"><a class="header-anchor" href="#\u6C42\u6A21\u4E0E\u53D6\u4F59" aria-hidden="true">#</a> \u6C42\u6A21\u4E0E\u53D6\u4F59</h2><ol><li>\u6C42\u6A21\u4E0E\u53D6\u4F59</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span> Lbs_per_stn <span class="token operator">=</span> <span class="token number">14</span>
cin <span class="token operator">&gt;&gt;</span> lbs <span class="token comment">// 181</span>
<span class="token keyword">int</span> stone  <span class="token operator">=</span> lbs <span class="token operator">/</span> Lbs_per_stn<span class="token punctuation">;</span>
<span class="token keyword">int</span> pounds <span class="token operator">=</span> lbs <span class="token operator">%</span> Lbs_per_stn<span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> stone <span class="token operator">&lt;&lt;</span> pounds<span class="token punctuation">;</span>
pounds <span class="token operator">=</span>   <span class="token number">13</span> <span class="token comment">//\u53D6\u4F59</span>
stone <span class="token operator">=</span> <span class="token number">12</span> <span class="token comment">// \u6C42\u6A21</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>\u4E3A\u4EC0\u4E48<code>float</code> \u6BD4<code>double</code>\u7CBE\u5EA6\u4F4E<br> \u901A\u5E38float\u6709\u6548\u4F4D\u657032\u4F4D,<code>double</code>\u6709\u6548\u4F4D\u657064\u4F4D,long double\u4E3A80,96\u6216128\u4F4D</li></ol><h2 id="\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u6570\u7EC4" aria-hidden="true">#</a> \u6570\u7EC4</h2><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>\u4E0D\u80FD\u5C06\u4E00\u4E2A\u6570\u7EC4\u8D4B\u7ED9\u53E6\u4E00\u4E2A\u6570\u7EC4<br> C++\u4E2D\u7684\u6570\u7EC4\u53EA\u6709\u5728\u5B9A\u4E49\u6570\u7EC4\u7684\u65F6\u5019\u624D\u80FD\u4F7F\u7528\u521D\u59CB\u5316</p></div><h4 id="\u521D\u59CB\u5316\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u521D\u59CB\u5316\u6570\u7EC4" aria-hidden="true">#</a> \u521D\u59CB\u5316\u6570\u7EC4</h4><p>\u521D\u59CB\u5316\u6570\u7EC4\u65F6\u53EF\u4EE5\u63D0\u4F9B\u5C11\u4E8E\u6570\u7EC4\u5143\u7D20\u7684\u503C,\u5219\u7F16\u8BD1\u5668\u4F1A\u5C06\u5176\u4ED6\u5143\u7D20\u8BBE\u7F6E\u4E3A0</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">float</span> hotelTip<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u7531\u4E0A\u53EF\u77E5\u5C06\u6570\u7EC4\u4E2D\u7684\u6240\u6709\u5143\u7D20\u90FD\u521D\u59CB\u5316\u4E3A0\u5219--\u53EA\u8981\u663E\u793A\u7684\u5C06\u7B2C\u4E00\u4E2A\u5143\u7D20\u521D\u59CB\u5316\u4E3A0\u5373\u53EF</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">float</span> hotelTip<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u5927\u62EC\u53F7\u4E2D\u4E0D\u5305\u542B\u4EFB\u4F55\u4E1C\u897F\u65F6\u5019,\u8FD9\u5C06\u628A\u6240\u6709\u5143\u7D20\u8BBE\u7F6E\u4E3A0</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">float</span> balances<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">//\u7B49\u53F7\u53EF\u7701\u7565</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u5B57\u7B26\u4E32</h2><h4 id="\u5B57\u7B26\u4E32\u8F93\u5165" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32\u8F93\u5165" aria-hidden="true">#</a> \u5B57\u7B26\u4E32\u8F93\u5165</h4><ol><li>\u9762\u5411\u884C\u7684\u8F93\u5165: getline() getline()\u7528\u4E8E\u8BFB\u53D6\u6574\u884C,\u901A\u8FC7\u56DE\u8F66\u952E\u8F93\u5165\u7684\u6362\u884C\u7B26\u6765\u786E\u5B9A\u8F93\u5165\u7ED3\u5C3E,\u8C03\u7528\u5B83\u53EF\u4EE5\u4F7F\u7528cin.getline()</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u4EE5\u4E0A\u8868\u793A\u5C06\u5185\u5BB9\u8BFB\u53D6\u5230\u4E00\u4E2A\u5305\u542B20\u4E2A\u5143\u7D20\u7684name\u6570\u7EC4\u4E2D</p><ol start="2"><li>\u9762\u5411\u884C\u7684\u8F93\u5165: get() \u4E0Egetline()\u63A5\u53D7\u7684\u53C2\u6570\u76F8\u540C,\u89E3\u91CA\u53C2\u6570\u7684\u65B9\u5F0F\u4E5F\u76F8\u540C,\u5E76\u4E14\u90FD\u8BFB\u53D6\u5230\u884C\u5C3E,\u4F46\u662Fget\u4E0D\u518D\u8BFB\u53D6\u5E76\u4E22\u5F03\u6362\u884C\u7B26,\u800C\u662F\u5C06\u5176\u7559\u5728\u8F93\u5165\u961F\u5217,\u5047\u5982\u6211\u4EEC\u8FDE\u7EED\u8C03\u7528\u4E24\u6B21git():</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> ArSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dessert<span class="token punctuation">,</span> Arsize<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7531\u4E8E\u7B2C\u4E00\u6B21\u8C03\u7528\u540E\u6362\u884C\u7B26\u7559\u5728\u8F93\u5165\u961F\u5217,\u6240\u4EE5\u7B2C\u4E8C\u6B21\u8C03\u7528\u65F6\u770B\u5230\u7B2C\u4E00\u4E2A\u5B57\u7B26\u4E3A\u6362\u884C\u7B26,\u56E0\u6B64get()\u8BA4\u4E3A\u5DF2\u7ECF\u5230\u8FBE\u884C\u5C3E,\u800C\u6CA1\u6709\u53D1\u73B0\u4EFB\u4F55\u53EF\u8BFB\u5185\u5BB9,\u4E0D\u501F\u52A9\u5E2E\u52A9,\u5B83\u5C06\u4E0D\u80FD\u8DE8\u8FC7\u6362\u884C\u7B26,\u6B64\u65F6\u5E94\u8BE5\u8C03\u7528\u4E00\u6B21\u4E0D\u5E26\u53C2\u6570\u7684cin.get()\u6765\u5904\u7406\u6362\u884C\u7B26</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// cin.get(name, ArSize);</span>
<span class="token comment">// cin.get()</span>
cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> ArSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dessert<span class="token punctuation">,</span> Arsize<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u5B57\u7B26\u4E32\u5904\u7406" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32\u5904\u7406" aria-hidden="true">#</a> \u5B57\u7B26\u4E32\u5904\u7406</h4><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">buildstr</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
    <span class="token keyword">int</span> times<span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Enter a character: &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> ch<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Enter an integer: &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> times<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>ps <span class="token operator">=</span> <span class="token function">buildstr</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> times<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> ps <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> ps<span class="token punctuation">;</span>
    ps <span class="token operator">=</span> <span class="token function">buildstr</span><span class="token punctuation">(</span><span class="token char">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> ps <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;-DONE-&quot;</span> <span class="token operator">&lt;&lt;</span> ps <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> ps<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">buildstr</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span> pstr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//\u4ECE\u540E\u5411\u524D\u586B\u5145,\u907F\u514D\u4E86\u4F7F\u7528\u989D\u5916\u7684\u53D8\u91CF</span>
    <span class="token comment">// int i = 0;</span>
    <span class="token comment">// while (i &lt; n)</span>
    <span class="token comment">// {</span>
    <span class="token comment">//     pstr[i++] = c;/* code */</span>
    <span class="token comment">// } </span>
    pstr<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        pstr<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
    <span class="token keyword">return</span> pstr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">c_in_str</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// \u5904\u7406\u5B57\u7B26\u4E32\u4E2D\u5B57\u7B26\u7684\u6807\u51C6\u65B9\u5F0F,\u4F7F\u7528\u5730\u5740\u904D\u5386\u800C\u4E0D\u662F\u53E6\u5916\u4F7F\u7528for\u5FAA\u73AF</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>str<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> ch<span class="token punctuation">)</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
        str<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7ED3\u6784\u7B80\u4ECB" tabindex="-1"><a class="header-anchor" href="#\u7ED3\u6784\u7B80\u4ECB" aria-hidden="true">#</a> \u7ED3\u6784\u7B80\u4ECB</h2>`,29),v={href:"https://blog.csdn.net/weixin_39640298/article/details/84349171",target:"_blank",rel:"noopener noreferrer"},m=s("C++\u4E2DStruct\u4E0EClass\u7684\u533A\u522B\u4E0E\u6BD4\u8F83"),b=p(`<ol><li>struct<br> \u4E0D\u540C\u4E8E\u6570\u7EC4,\u5B83\u53EF\u4EE5\u540C\u65F6\u5B58\u50A8\u4E0D\u540C\u7C7B\u578B\u7684\u5143\u7D20</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">inflatable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> volume<span class="token punctuation">;</span>
    <span class="token keyword">double</span> price<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">//   ;\u7ED3\u675F\u7ED3\u6784\u4F53\u58F0\u660E</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C++\u4E0D\u63D0\u5021\u4F7F\u7528\u5916\u90E8\u53D8\u91CF,\u4F46\u63D0\u5021\u4F7F\u7528\u5916\u90E8\u7ED3\u6784\u58F0\u660E.\u53E6\u5916,\u5728\u5916\u90E8\u58F0\u660E\u7B26\u53F7\u5E38\u91CF\u901A\u5E38\u66F4\u5408\u7406 2. \u7ED3\u6784\u521D\u59CB\u5316 \u4E0E\u6570\u7EC4\u4E00\u6837,C++\u652F\u6301\u5C06\u5217\u8868\u521D\u59CB\u5316\u7528\u4E8E\u7ED3\u6784</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>inflatable duck <span class="token punctuation">{</span><span class="token string">&quot;Daphne&quot;</span><span class="token punctuation">,</span> <span class="token number">0.12</span><span class="token punctuation">,</span> <span class="token number">9.98</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">\u53EF\u7528\u4E8E\u51FD\u6570\u4F20\u5165\u6216\u8FD4\u56DE\u591A\u503C,C++\u4F7F\u7528\u8005\u53EF\u4EE5\u5C06\u7ED3\u6784\u4F5C\u4E3A\u53C2\u6570\u4F20\u9012\u7ED9\u51FD\u6570,\u4E5F\u53EF\u4EE5\u8BA9\u51FD\u6570\u8FD4\u56DE\u4E00\u4E2A\u7ED3\u6784</p></div><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">struct</span> <span class="token class-name">inflatable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> volume<span class="token punctuation">;</span>
    <span class="token keyword">double</span> price<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
    inflatable bouquet <span class="token operator">=</span> 
    <span class="token punctuation">{</span>
        <span class="token string">&quot;sunflowers&quot;</span><span class="token punctuation">,</span>
        <span class="token number">0.20</span><span class="token punctuation">,</span>
        <span class="token number">12.49</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    inflatable choice<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;bouquet: &quot;</span> <span class="token operator">&lt;&lt;</span> bouquet<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; for $&quot;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> bouquet<span class="token punctuation">.</span>price <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    choice <span class="token operator">=</span> bouquet<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;choice: &quot;</span> <span class="token operator">&lt;&lt;</span> choice<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span><span class="token string">&quot; for $&quot;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> choice<span class="token punctuation">.</span>price <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// bouquet: sunflowers for $12.49</span>
<span class="token comment">// choice: sunflowers for $12.49</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>\u5171\u7528\u4F53(union)</li><li>\u679A\u4E3E(enum)</li></ol><h2 id="\u6307\u9488" tabindex="-1"><a class="header-anchor" href="#\u6307\u9488" aria-hidden="true">#</a> \u6307\u9488</h2><ol><li>\u5B9A\u4E49\u6307\u9488<br> *\u8FD0\u7B97\u7B26\u4E24\u8FB9\u7684\u7A7A\u683C\u662F\u53EF\u9009\u7684</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span><span class="token operator">*</span>ptr<span class="token punctuation">;</span>   <span class="token comment">// \u4E5F\u53EF\u4EE5,\u4E3A\u4E86\u89C4\u8303\u4E0D\u8981\u7528</span>
<span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
<span class="token comment">// \u73B0\u5728\u591A\u6570\u8FD9\u4E48\u4F7F\u7528,\u8FD9\u6837\u5F3A\u8C03\u7684\u662Fint*\u662F\u4E00\u79CD\u7C7B\u578B--\u6307\u5411int\u7684\u6307\u9488</span>
<span class="token keyword">int</span><span class="token operator">*</span> ptr<span class="token punctuation">;</span> 
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line">\xA0</div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">\u4E0B\u9762\u58F0\u660E\u521B\u5EFA\u4E86\u4E00\u4E2A\u6307\u9488(p1)\u548C\u4E00\u4E2Aint\u7C7B\u578B\u53D8\u91CF(p2)</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span><span class="token operator">*</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">;</span>  <span class="token comment">// \u5BF9\u6BCF\u4E2A\u6307\u9488\u53D8\u91CF\u540D\u90FD\u9700\u8981\u4F7F\u7528\u4E00\u4E2A *</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><ol start="2"><li>\u53EF\u4EE5\u5728\u58F0\u660E\u8BED\u53E5\u4E2D\u521D\u59CB\u5316\u6307\u9488,\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B,\u88AB\u521D\u59CB\u5316\u7684\u662F\u6307\u9488,\u800C\u4E0D\u662F\u5B83\u6307\u5411\u7684\u503C</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// \u5C06pt(\u800C\u4E0D\u662F*pt)\u7684\u503C\u8BBE\u7F6E\u4E3A&amp;height</span>
<span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">*</span> pt <span class="token operator">=</span> <span class="token operator">&amp;</span>height<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">\u4E00\u5B9A\u8981\u5728\u5BF9\u6307\u9488\u5E94\u7528\u89E3\u9664\u5F15\u7528\u8FD0\u7B97\u7B26(*)\u4E4B\u524D,\u5C06\u6307\u521D\u59CB\u5316\u4E3A\u4E00\u4E2A\u786E\u5B9A\u7684,\u9002\u5F53\u7684\u5730\u5740,\u8FD9\u662F\u5173\u4E8E\u6307\u9488\u7684\u91D1\u79D1\u7389\u5F8B</p></div><ol start="3"><li>\u4F7F\u7528new\u6765\u5206\u914D\u5185\u5B58</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token operator">*</span> pt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token operator">*</span> ptn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>\u4F7F\u7528delete\u91CA\u653E\u5185\u5B58</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token operator">*</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">;</span>
\xB7\xB7\xB7
<span class="token keyword">delete</span> ps<span class="token punctuation">;</span>   <span class="token comment">//\u91CA\u653E\u6307\u9488\u6307\u5411\u7684\u5185\u5B58,\u4E0D\u4F1A\u5220\u9664\u6307\u9488ps\u672C\u8EAB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">\u4E00\u5B9A\u8981\u914D\u5BF9\u4F7F\u7528new\u548Cdelete,\u5426\u5219\u5C06\u53D1\u751F\u5185\u5B58\u6CC4\u6F0F(memory leak)</p></div><ol start="5"><li>\u4F7F\u7528new\u6765\u521B\u5EFA\u52A8\u6001\u6570\u7EC4</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
    <span class="token keyword">double</span> <span class="token operator">*</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    p3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span>
    p3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
    p3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.8</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;p3[1] is &quot;</span> <span class="token operator">&lt;&lt;</span> p3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;.\\n&quot;</span><span class="token punctuation">;</span>
    p3 <span class="token operator">=</span> p3 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;now p3[0] is &quot;</span> <span class="token operator">&lt;&lt;</span> p3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;and&quot;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;p3[1] is &quot;</span> <span class="token operator">&lt;&lt;</span> p3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;.\\n&quot;</span><span class="token punctuation">;</span>
    p3 <span class="token operator">=</span> p3 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> p3<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// p3[1] is 0.5.</span>
<span class="token comment">// now p3[0] is 0.5 and p3[1] is 0.8.</span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4EE5\u4E0B\u7A0B\u5E8F\u8BF4\u660EC++\u5C06\u6570\u7EC4\u540D\u89E3\u91CA\u4E3A\u5730\u5740</p>`,22),h=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`
`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token keyword"},"namespace"),s(" std"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"double"),s(" wages"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"10000.0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"20000.0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"30000.0"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"short"),s(" stack"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"double"),s(),n("span",{class:"token operator"},"*"),s(" pw "),n("span",{class:"token operator"},"="),s(" wages"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"short"),s(),n("span",{class:"token operator"},"*"),s(" ps "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"&"),s("stack"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`

    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"pw = "'),s(),n("span",{class:"token operator"},"<<"),s(" pw "),n("span",{class:"token operator"},"<<"),n("span",{class:"token string"},'", *pw = "'),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token operator"},"*"),s("pw "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    pw `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),n("span",{class:"token string"},'"add 1 to the pw pointer:\\n"'),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"pw = "'),s(),n("span",{class:"token operator"},"<<"),s(" pw "),n("span",{class:"token operator"},"<<"),n("span",{class:"token string"},'", *pw = "'),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token operator"},"*"),s("pw "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"\\n\\n"'),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"ps = "'),s(),n("span",{class:"token operator"},"<<"),s(" ps "),n("span",{class:"token operator"},"<<"),n("span",{class:"token string"},'", *ps = "'),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token operator"},"*"),s("ps "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    ps `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),n("span",{class:"token string"},'"add 1 to the ps pointer:\\n"'),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"ps = "'),s(),n("span",{class:"token operator"},"<<"),s(" ps "),n("span",{class:"token operator"},"<<"),n("span",{class:"token string"},'", *ps = "'),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token operator"},"*"),s("ps "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"\\n\\n"'),n("span",{class:"token punctuation"},";"),s(`

    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"stack[0] = "'),s(),n("span",{class:"token operator"},"<<"),s(" stack"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(`
            `),n("span",{class:"token operator"},"<<"),n("span",{class:"token string"},'", stack[1] = "'),s(),n("span",{class:"token operator"},"<<"),s(" stack"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"\\n"'),n("span",{class:"token punctuation"},";"),s(`
    
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"*stack = "'),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token operator"},"*"),s(`stack
        `),n("span",{class:"token operator"},"<<"),n("span",{class:"token string"},'", *(stack + 1) = "'),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("stack "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),s("wages"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"= size of wages array\\n"'),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),s("pw"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"size of pw pointer\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},`/*
pw = 0x7fffffffdc30, *pw = 10000
add 1 to the pw pointer:
pw = 0x7fffffffdc38, *pw = 20000

ps = 0x7fffffffdc2a, *ps = 3
add 1 to the ps pointer:
ps = 0x7fffffffdc2c, *ps = 2

stack[0] = 3, stack[1] = 2
*stack = 3, *(stack + 1) = 2
24= size of wages array
8size of pw pointer
*/`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=p(`<h4 id="\u4F7F\u7528\u6307\u9488\u5BF9char\u7C7B\u578B\u8FDB\u884C\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u6307\u9488\u5BF9char\u7C7B\u578B\u8FDB\u884C\u904D\u5386" aria-hidden="true">#</a> \u4F7F\u7528\u6307\u9488\u5BF9char\u7C7B\u578B\u8FDB\u884C\u904D\u5386</h4><div class="custom-container tip"><p class="custom-container-title">\u8BB0\u4F4F&quot;bear&quot;\u5B9E\u9645\u4E0A\u8868\u793A\u7684\u662F\u5B57\u7B26\u4E32\u7684\u5730\u5740</p></div><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span>
    <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token comment">// \u76F4\u63A5\u7528\u6307\u9488\u6307\u5411\u5B57\u7B26\u4E32,\u8FD9\u6837\u624D\u80FD\u4FEE\u6539\u6307\u5411\u5B57\u7B26\u4E32\u6307\u9488\u7684\u503C</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>ch <span class="token operator">=</span> <span class="token string">&quot;bear&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// char ch[14] = &quot;bear&quot;;  \u8FD9\u6837*ch\u4E0D\u53EF\u4FEE\u6539</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ch <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> ch <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>ch<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ch <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>ch<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u9012\u589E\u4E0E\u9012\u51CF\u8FD0\u7B97\u7B26" tabindex="-1"><a class="header-anchor" href="#\u9012\u589E\u4E0E\u9012\u51CF\u8FD0\u7B97\u7B26" aria-hidden="true">#</a> \u9012\u589E\u4E0E\u9012\u51CF\u8FD0\u7B97\u7B26</h2><hr><div class="custom-container tip"><p class="custom-container-title">++a\u4E0Ea++\u7684\u533A\u522B\uFF1A\u7B80\u5355\u7684\u8BB2a++\u662F\u5148\u8FDB\u884C\u8FD0\u7B97\u518D\u81EA\u589E,++a\u662F\u5148\u81EA\u589E\u518D\u53C2\u4E0E\u8FD0\u7B97</p></div><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;a  = &quot;</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;:  b = &quot;</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;a++  = &quot;</span> <span class="token operator">&lt;&lt;</span> a<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;:  ++b = &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;a  = &quot;</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;:  b = &quot;</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 
a  = 20:  b = 20
a++  = 20:  ++b = 21
a  = 21:  b = 21
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53EF\u4EE5\u5C06\u9012\u589E\u8FD0\u7B97\u7B26\u7528\u4E8E\u6307\u9488\u548C\u57FA\u672C\u53D8\u91CF</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">double</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token number">3.2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5.4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token operator">*</span>pt <span class="token operator">=</span> arr<span class="token punctuation">;</span>
<span class="token operator">++</span>pt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="strcmp-\u51FD\u6570\u5224\u65AD\u4E24\u5B57\u7B26\u4E32\u662F\u5426\u76F8\u540C" tabindex="-1"><a class="header-anchor" href="#strcmp-\u51FD\u6570\u5224\u65AD\u4E24\u5B57\u7B26\u4E32\u662F\u5426\u76F8\u540C" aria-hidden="true">#</a> strcmp()\u51FD\u6570\u5224\u65AD\u4E24\u5B57\u7B26\u4E32\u662F\u5426\u76F8\u540C</h2><p>C-\u98CE\u683C\u5B57\u7B26\u4E32\u5E93\u51FD\u6570,\u8BE5\u51FD\u6570\u63A5\u53D7\u4E24\u4E2A\u5B57\u7B26\u4E32\u5730\u5740\u4F5C\u4E3A\u53C2\u6570,\u8FD9\u610F\u5473\u7740\u53C2\u6570\u53EF\u4EE5\u662F\u6307\u9488\u3001\u5B57\u7B26\u4E32\u5E38\u91CF\u3001\u6216\u5B57\u7B26\u4E32\u6570\u7EC4\u540D. <strong>\u5982\u679C\u4E24\u4E2A\u5B57\u7B26\u4E32\u76F8\u540C,\u8BE5\u51FD\u6570\u5C06\u8FD4\u56DE\u96F6</strong></p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
    <span class="token keyword">char</span> word<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;?ate&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token string">&quot;mate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ch<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> word <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;After loop ends, word is: &quot;</span> <span class="token operator">&lt;&lt;</span> word <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0B\u9762\u4EE3\u7801\u4E0E\u4E0A\u9762\u8FD0\u884C\u7ED3\u679C\u4E00\u6837,\u4F46\u662F\u662F\u4F7F\u7528\u7684string\u7C7B\u5B57\u7B26\u4E32\u800C\u4E0D\u662FC-\u98CE\u683C\u5B57\u7B26\u4E32</p>`,13),w=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<string>")]),s(`
`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token keyword"},"namespace"),s(" std"),n("span",{class:"token punctuation"},";"),s(`
    string word `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"?ate"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"char"),s(" ch "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token char"},"'a'"),n("span",{class:"token punctuation"},";"),s(" word "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token string"},'"mate"'),n("span",{class:"token punctuation"},";"),s(" ch"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(" word "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
        word`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" ch"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"After loop ends, word is: "'),s(),n("span",{class:"token operator"},"<<"),s(" word "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"},"\xA0"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},`/* ?ate
aate
bate
cate
date
eate
fate
gate
hate
iate
jate
kate
late
After loop ends, word is: mate */`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=p(`<h2 id="\u7F16\u5199\u5EF6\u65F6\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u7F16\u5199\u5EF6\u65F6\u51FD\u6570" aria-hidden="true">#</a> \u7F16\u5199\u5EF6\u65F6\u51FD\u6570</h2><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">long</span> wait <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>wait <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">)</span>
    wait<span class="token operator">++</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5934\u6587\u4EF6ctime\u4E2D\u63D0\u4F9B\u4E86\u89E3\u51B3\u7B56\u7565,\u9996\u5148\u5B83\u5B9A\u4E49\u4E86\u4E00\u4E2A\u7B26\u53F7\u5E38\u91CF<code>CLOCKS_PER_SEC</code>,\u8BE5\u5E38\u91CF\u7B49\u4E8E\u6BCF\u79D2\u949F\u5305\u542B\u7684\u7CFB\u7EDF\u65F6\u95F4\u5355\u4F4D\u6570,\u56E0\u6B64\u5C06\u7CFB\u7EDF\u65F6\u95F4\u9664\u4EE5\u8FD9\u4E2A\u503C\u6216\u8005\u5C06\u79D2\u6570\u4E58\u4EE5<code>CLOCKS_PER_SEC</code>,\u53EF\u4EE5\u5F97\u5230\u4EE5\u7CFB\u7EDF\u65F6\u95F4\u4E3A\u5355\u4F4D\u7684\u65F6\u95F4,\u5176\u6B21ctime\u5C06clock_t\u4F5C\u4E3Aclock()\u8FD4\u56DE\u7C7B\u578B\u7684\u522B\u540D:\u4EE5\u4E0B\u6F14\u793A\u4F7F\u7528clock()\u521B\u5EFA\u7684\u5EF6\u65F6\u51FD\u6570</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctime&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Enter the delay time, in seconds: &quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> secs<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> secs<span class="token punctuation">;</span>
    clock_t delay <span class="token operator">=</span> secs <span class="token operator">*</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;staring\\a\\n&quot;</span><span class="token punctuation">;</span>
    clock_t start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">&lt;</span> delay<span class="token punctuation">)</span>
        <span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;done \\a\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4F7F\u7528clock-\u8BA1\u65F6" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528clock-\u8BA1\u65F6" aria-hidden="true">#</a> \u4F7F\u7528clock()\u8BA1\u65F6</h2>`,5),q={href:"https://blog.csdn.net/codedz/article/details/80387001",target:"_blank",rel:"noopener noreferrer"},x=s("clock()"),S=s(" \u51FD\u6570\u8FD4\u56DE\u4ECE\u201C\u5F00\u542F\u8FD9\u4E2A\u7A0B\u5E8F\u8FDB\u7A0B\u201D\u5230\u201C\u7A0B\u5E8F\u4E2D\u8C03\u7528clock()\u51FD\u6570\u201D\u65F6\u4E4B\u95F4\u7684CPU\u65F6\u949F\u8BA1\u65F6\u5355\u5143(clock tick)\u6570"),C=p(`<h4 id="eg" tabindex="-1"><a class="header-anchor" href="#eg" aria-hidden="true">#</a> eg:</h4><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
clock_t start<span class="token punctuation">,</span>end<span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	start<span class="token operator">=</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//\u7A0B\u5E8F\u5F00\u59CB\u8BA1\u65F6</span>
	<span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1e8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
		ans<span class="token operator">++</span><span class="token punctuation">;</span>
	end<span class="token operator">=</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//\u7A0B\u5E8F\u7ED3\u675F\u7528\u65F6</span>
	<span class="token keyword">double</span> endtime<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">/</span>CLOCKS_PER_SEC<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;Total time:&quot;</span><span class="token operator">&lt;&lt;</span>endtime<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>		<span class="token comment">//s\u4E3A\u5355\u4F4D</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;Total time:&quot;</span><span class="token operator">&lt;&lt;</span>endtime<span class="token operator">*</span><span class="token number">1000</span><span class="token operator">&lt;&lt;</span><span class="token string">&quot;ms&quot;</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>	<span class="token comment">//ms\u4E3A\u5355\u4F4D</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u57FA\u4E8E\u8303\u56F4\u7684for\u5FAA\u73AF-range-based" tabindex="-1"><a class="header-anchor" href="#\u57FA\u4E8E\u8303\u56F4\u7684for\u5FAA\u73AF-range-based" aria-hidden="true">#</a> \u57FA\u4E8E\u8303\u56F4\u7684for\u5FAA\u73AF(range-based)</h2><p><strong>\u7B80\u5316\u4E86\u4E00\u79CD\u5E38\u89C1\u7684\u5FAA\u73AF\u4EFB\u52A1:\u5BF9\u6570\u7EC4(\u6216\u5BB9\u5668\u7C7B,\u5982vector\u548Carray)\u7684\u6BCF\u4E2A\u5143\u7D20\u6267\u884C\u76F8\u540C\u7684\u64CD\u4F5C:</strong></p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> price<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4.2</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">6.5</span><span class="token punctuation">,</span> <span class="token number">5.7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token operator">:</span> price<span class="token punctuation">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 4.2
3.4
4.5
6.5
5.7 */</span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">\u4F46\u662F\u5982\u679C\u8981\u4FEE\u6539\u6570\u7EC4\u4E2D\u7684\u5143\u7D20,\u9700\u8981\u4F7F\u7528\u4E0D\u540C\u7684\u5FAA\u73AF\u53D8\u91CF\u7684\u8BED\u6CD5:</p></div><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">&amp;</span>x <span class="token operator">:</span> price<span class="token punctuation">)</span>
<span class="token comment">// \u7B26\u53F7&amp;\u8868\u793Ax\u662F\u4E00\u4E2A\u5F15\u7528\u53D8\u91CF,\u8FD9\u6837\u624D\u80FD\u4FEE\u6539\u6570\u7EC4,\u800C\u4E0A\u9762\u7684\u4EE3\u7801\u4E0D\u80FD</span>
    x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">0.80</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><div class="highlight-line">\xA0</div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u8FD8\u53EF\u4EE5\u7ED3\u5408\u4F7F\u7528\u57FA\u4E8E\u8303\u56F4\u7684for\u5FAA\u73AF\u548C\u521D\u59CB\u5316\u5217\u8868:\u8FD9\u79CD\u5FAA\u73AF\u4E3B\u8981\u7528\u4E8E\u6A21\u677F\u5BB9\u5668\u7C7B</strong></p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 3 5 2 8 6 </span>
</code></pre><div class="highlight-lines"><div class="highlight-line">\xA0</div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5B57\u7B26\u4E32\u51FD\u6570\u5E93cctype" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32\u51FD\u6570\u5E93cctype" aria-hidden="true">#</a> \u5B57\u7B26\u4E32\u51FD\u6570\u5E93cctype</h2><p>cctype\u51FD\u6570\u5E93\u53EF\u4EE5\u7B80\u5316\u786E\u5B9A\u5B57\u7B26\u662F\u5426\u4E3A\u5927\u5199\u5B57\u6BCD\u3001\u6570\u5B57\u3001\u6807\u70B9\u7B26\u53F7\u7B49\u5DE5\u4F5C,\u8FD9\u4E9B\u51FD\u6570\u7684\u539F\u578B\u5728\u5934\u6587\u4EF6cctype\u4E2D\u5B9A\u4E49\u7684</p><table><thead><tr><th>\u51FD\u6570\u540D\u79F0</th><th>\u8FD4\u56DE\u503C</th></tr></thead><tbody><tr><td>isalnum()</td><td>\u5982\u679C\u62EC\u53F7\u5185\u53C2\u6570\u662F\u5B57\u6BCD\u6216\u6570\u5B57,\u51FD\u6570\u5C31\u8FD4\u56DEtrue,\u5426\u5219\u8FD4\u56DEfalse</td></tr><tr><td>isalpha()</td><td>\u5982\u679C\u53C2\u6570\u662F\u5B57\u6BCD,\u51FD\u6570\u8FD4\u56DEtrue, \u5426\u5219\u8FD4\u56DEfalse</td></tr><tr><td>islower()</td><td>\u5982\u679C\u53C2\u6570\u662F\u5C0F\u5199\u5B57\u6BCD,\u51FD\u6570\u8FD4\u56DEtrue,\u901A\u5E38\u6211\u4EEC\u4E5F\u53EF\u4EE5\u8FD9\u6837\u5224\u65AD\u5C0F\u5199\u5B57\u6BCD c &gt;= &#39;a&#39; &amp;&amp; c &lt;= &#39;z&#39;</td></tr><tr><td>isupper()</td><td>\u5982\u679C\u53C2\u6570\u662F\u5927\u5199\u5B57\u6BCD,\u51FD\u6570\u8FD4\u56DEtrue,\u901A\u5E38\u6211\u4EEC\u4E5F\u53EF\u4EE5\u8FD9\u6837\u5224\u65AD\u5927\u5199\u5B57\u6BCD c &gt;= &#39;A&#39; &amp;&amp; c &lt;= &#39;Z&#39;</td></tr><tr><td>isdigit()</td><td>\u5982\u679C\u53C2\u6570\u662F\u6570\u5B57,\u51FD\u6570\u8FD4\u56DEtrue,\u901A\u5E38\u6211\u4EEC\u4E5F\u53EF\u4EE5\u8FD9\u6837\u5224\u65AD\u6570\u5B57 c &gt;= &#39;0&#39; &amp;&amp; c &lt;= &#39;9&#39;</td></tr><tr><td>isxdigit()</td><td>\u5982\u679C\u53C2\u6570\u662F\u5341\u516D\u8FDB\u5236\u6570\u5B57,\u53730 ~ 9,a ~ f\u6216A ~ F,\u51FD\u6570\u8FD4\u56DEtrue</td></tr><tr><td>ispunct()</td><td>\u5982\u679C\u53C2\u6570\u662F\u6807\u70B9\u7B26\u53F7,\u51FD\u6570\u8FD4\u56DEtrue</td></tr><tr><td>iscntrl()</td><td>\u5982\u679C\u53C2\u6570\u662F\u63A7\u5236\u5B57\u7B26,\u51FD\u6570\u8FD4\u56DEtrue</td></tr><tr><td>isgraph()</td><td>\u5982\u679C\u53C2\u6570\u9664\u7A7A\u683C\u4E4B\u5916\u7684\u6253\u5370\u5B57\u7B26,\u51FD\u6570\u8FD4\u56DEtrue</td></tr><tr><td>isprint()</td><td>\u5982\u679C\u53C2\u6570\u662F\u6253\u5370\u5B57\u7B26(\u5305\u62EC\u7A7A\u683C&#39; &#39;),\u51FD\u6570\u8FD4\u56DEtrue</td></tr><tr><td>isspace()</td><td>\u5982\u679C\u53C2\u6570\u662F\u6807\u51C6\u7A7A\u767D\u5B57\u7B26,\u5982\u7A7A\u683C&#39; &#39;\u3001\u6362\u884C\u7B26&#39;\\n&#39;\u3001\u6C34\u5E73\u5236\u8868\u7B26&#39;\\t&#39;\u7B49</td></tr><tr><td>tolower()</td><td>\u5982\u679C\u53C2\u6570\u662F\u5B57\u6BCD(\u65E0\u8BBA\u5927\u5C0F\u5199),\u51FD\u6570\u8FD4\u56DE\u5176\u5C0F\u5199\u5B57\u6BCD,\u5426\u5219\u8FD4\u56DE\u539F\u5B57\u7B26</td></tr><tr><td>toupper()</td><td>\u5982\u679C\u53C2\u6570\u662F\u5B57\u6BCD(\u65E0\u8BBA\u5927\u5C0F\u5199),\u51FD\u6570\u8FD4\u56DE\u5176\u5927\u5199\u5B57\u6BCD,\u5426\u5219\u8FD4\u56DE\u539F\u5B57\u7B26</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>\u4EC0\u4E48\u662F\u63A7\u5236\u5B57\u7B26\uFF1F \u63A7\u5236\u5B57\u7B26\u4E5F\u53EB\u4E0D\u53EF\u89C1\u5B57\u7B26,\u5373ASCII\u7801\u4E2D\u4E0D\u80FD\u6B63\u786E\u6253\u5370\u663E\u793A\u51FA\u6765\u7684\u5B57\u7B26</li><li>\u4EC0\u4E48\u662F\u6253\u5370\u5B57\u7B26\uFF1F \u6253\u5370\u5B57\u7B26\u4E5F\u53EB\u53EF\u89C1\u5B57\u7B26,\u5373ASCII\u7801\u4E2D\u53EF\u4EE5\u6B63\u786E\u6253\u5370\u663E\u793A\u51FA\u6765\u7684\u5B57\u7B26</li></ul></div><h2 id="\u8FD0\u7B97\u7B26" tabindex="-1"><a class="header-anchor" href="#\u8FD0\u7B97\u7B26" aria-hidden="true">#</a> ?:\u8FD0\u7B97\u7B26</h2><p>\u5E38\u7528\u6765\u4EE3\u66FFif else,\u5B83\u662FC++\u4E2D\u552F\u4E00\u7684\u4E00\u4E2A\u9700\u8981\u4E09\u4E2A\u64CD\u4F5C\u6570\u7684\u8FD0\u7B97\u7B26</p>`,15),V=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token number"},"5"),s(),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"3"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token number"},"10"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"12"),s(),n("span",{class:"token comment"},"// 5 > 3 is true,so expression value is 10"),s(`
`),n("span",{class:"token keyword"},"int"),s(" c "),n("span",{class:"token operator"},"="),s(" a "),n("span",{class:"token operator"},">"),s(" b "),n("span",{class:"token operator"},"?"),s(" a "),n("span",{class:"token operator"},":"),s(" b"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("div",{class:"highlight-line"},"\xA0")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("div",{class:"language-text ext-text line-numbers-mode"},[n("pre",{class:"language-text"},[n("code",null,`/*
int c;
if (a > b)
    c = a;
else 
    c = b;
*/
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=p('<h2 id="break\u548Ccontinue\u8BED\u53E5" tabindex="-1"><a class="header-anchor" href="#break\u548Ccontinue\u8BED\u53E5" aria-hidden="true">#</a> break\u548Ccontinue\u8BED\u53E5</h2><ul><li>break:<strong>\u7ED3\u675F\u6574\u4E2A\u5FAA\u73AF,\u4E0D\u5728\u5224\u65AD\u5FAA\u73AF\u6761\u4EF6\u6210\u7ACB\u4E0E\u5426</strong></li><li>continue:<strong>\u8DF3\u51FA\u672C\u6B21\u5FAA\u73AF,\u800C\u4E0D\u662F\u7EC8\u6B62\u6574\u4E2A\u5FAA\u73AF</strong></li></ul><div class="custom-container tip"><p class="custom-container-title">\u5C0F\u8D34\u58EB</p><p>break\u53EA\u80FD\u8DF3\u51FA\u4E00\u5C42\u5FAA\u73AF,\u5F53\u6709\u591A\u5C42\u5D4C\u5957\u5FAA\u73AF\u65F6,\u65E0\u6CD5\u4E00\u6B21\u8DF3\u51FA\u6240\u6709\u5FAA\u73AF</p></div><h2 id="\u7B80\u5355\u6587\u4EF6\u8F93\u5165\u8F93\u51FA" tabindex="-1"><a class="header-anchor" href="#\u7B80\u5355\u6587\u4EF6\u8F93\u5165\u8F93\u51FA" aria-hidden="true">#</a> \u7B80\u5355\u6587\u4EF6\u8F93\u5165\u8F93\u51FA</h2><h3 id="\u5199\u5165\u5230\u6587\u672C\u6587\u4EF6" tabindex="-1"><a class="header-anchor" href="#\u5199\u5165\u5230\u6587\u672C\u6587\u4EF6" aria-hidden="true">#</a> \u5199\u5165\u5230\u6587\u672C\u6587\u4EF6</h3>',5),z=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<fstream>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token keyword"},"namespace"),s(" std"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" automobile"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" year"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"double"),s(" a_price"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"double"),s(" d_price"),n("span",{class:"token punctuation"},";"),s(`

    ofstream outFile`),n("span",{class:"token punctuation"},";"),s(`
    outFile`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"open"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"outfile.txt"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Enter the make and model of automobile: "'),n("span",{class:"token punctuation"},";"),s(`
    cin`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getline"),n("span",{class:"token punctuation"},"("),s("automobile"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Enter the model year: "'),n("span",{class:"token punctuation"},";"),s(`
    cin `),n("span",{class:"token operator"},">>"),s(" year"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Enter the original asking price: "'),n("span",{class:"token punctuation"},";"),s(`
    cin `),n("span",{class:"token operator"},">>"),s(" a_price"),n("span",{class:"token punctuation"},";"),s(`
    d_price `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0.913"),s(),n("span",{class:"token operator"},"*"),s(" a_price"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// display information on screen with cout"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(" fixed"),n("span",{class:"token punctuation"},";"),s(`
    cout`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"precision"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    cout`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setf"),n("span",{class:"token punctuation"},"("),s("ios_base"),n("span",{class:"token double-colon punctuation"},"::"),s("showpoint"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Make and mode: "'),s(),n("span",{class:"token operator"},"<<"),s(" automobile "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"year: "'),s(),n("span",{class:"token operator"},"<<"),s(" year "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"was asking $"'),s(),n("span",{class:"token operator"},"<<"),s(" a_price "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Now asking $"'),s(),n("span",{class:"token operator"},"<<"),s(" d_price "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    outFile `),n("span",{class:"token operator"},"<<"),s(" fixed"),n("span",{class:"token punctuation"},";"),s(`
    outFile`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"precision"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    outFile`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setf"),n("span",{class:"token punctuation"},"("),s("ios_base"),n("span",{class:"token double-colon punctuation"},"::"),s("showpoint"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    outFile `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Make and mode: "'),s(),n("span",{class:"token operator"},"<<"),s(" automobile "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    outFile `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"year: "'),s(),n("span",{class:"token operator"},"<<"),s(" year "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    outFile `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"was asking $"'),s(),n("span",{class:"token operator"},"<<"),s(" a_price "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    outFile `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Now asking $"'),s(),n("span",{class:"token operator"},"<<"),s(" d_price "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    outFile`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"close"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),$=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},`/*
Enter the make and model of automobile: Flitz Perky
Enter the model year: 2009
Enter the original asking price: 13500
Make and mode: Flitz Perky
year: 2009
was asking $13500.00
Now asking $12325.50
// outfile.txt:
    Make and mode: Flitz Perky
    year: 2009
    was asking $13500.00
    Now asking $12325.50
*/`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=n("h3",{id:"\u8BFB\u53D6\u6587\u672C\u6587\u4EF6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u8BFB\u53D6\u6587\u672C\u6587\u4EF6","aria-hidden":"true"},"#"),s(" \u8BFB\u53D6\u6587\u672C\u6587\u4EF6")],-1),N=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<fstream>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<cstdlib>"),s(),n("span",{class:"token comment"},"//support exit()")]),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"int"),s(" SIZE "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"60"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token keyword"},"namespace"),s(" std"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" filename"),n("span",{class:"token punctuation"},"["),s("SIZE"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    ifstream inFile`),n("span",{class:"token punctuation"},";"),n("span",{class:"token comment"},"//\u521B\u5EFA\u6587\u4EF6\u5BF9\u8C61"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Enter name of data file: "'),n("span",{class:"token punctuation"},";"),s(`
    cin`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getline"),n("span",{class:"token punctuation"},"("),s("filename"),n("span",{class:"token punctuation"},","),s(" SIZE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    inFile`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"open"),n("span",{class:"token punctuation"},"("),s("filename"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("inFile"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"is_open"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Could not open the file"'),s(),n("span",{class:"token operator"},"<<"),s(" filename "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Progream terminating.\\n"'),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"exit"),n("span",{class:"token punctuation"},"("),s("EXIT_FAILURE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"double"),s(" value"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"double"),s(" sum "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0.0"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" count "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`

    inFile `),n("span",{class:"token operator"},">>"),s(" value"),n("span",{class:"token punctuation"},";"),n("span",{class:"token comment"},"//\u4F20\u5165\u7B2C\u4E00\u4E2Avalue"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("inFile"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"good"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token operator"},"++"),s("count"),n("span",{class:"token punctuation"},";"),s(`
        sum `),n("span",{class:"token operator"},"+="),s(" value"),n("span",{class:"token punctuation"},";"),s(`
        inFile `),n("span",{class:"token operator"},">>"),s(" value"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("inFile"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"eof"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token comment"},"//\u5224\u65AD\u662F\u5426\u8BFB\u53D6\u5B8C"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"end of file reached\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("inFile"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fail"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token comment"},"//\u8BFB\u53D6\u5931\u8D25"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Input terminated by data mismatch.\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"else"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Input terminated for unknown reason\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("count "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"No data processed\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"else"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Item read: "'),s(),n("span",{class:"token operator"},"<<"),s(" count "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Sum: "'),s(),n("span",{class:"token operator"},"<<"),s(" sum "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Average: "'),s(),n("span",{class:"token operator"},"<<"),s(" sum "),n("span",{class:"token operator"},"/"),s(" count "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    inFile`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"close"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},`/*
//data.txt
18 19 18.8 20.9
15 34 19.4
17.5

Enter name of data file: data.txt
end of file reached
Item read: 7
Sum: 145.1
Average: 20.7286
*/`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=p(`<h2 id="\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570" aria-hidden="true">#</a> \u51FD\u6570</h2><h3 id="\u51FD\u6570\u57FA\u672C\u77E5\u8BC6" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u57FA\u672C\u77E5\u8BC6" aria-hidden="true">#</a> \u51FD\u6570\u57FA\u672C\u77E5\u8BC6</h3><h4 id="\u51FD\u6570\u8FD4\u56DE\u503C" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u8FD4\u56DE\u503C" aria-hidden="true">#</a> \u51FD\u6570\u8FD4\u56DE\u503C</h4><p>C++\u8FD4\u56DE\u503C\u7C7B\u578B\u6709\u4E00\u5B9A\u7684\u9650\u5236,<strong>\u4E0D\u80FD\u662F\u6570\u7EC4</strong>,\u4F46\u662F\u53EF\u4EE5\u662F\u5176\u4ED6\u4EFB\u4F55\u7C7B\u578B--\u6574\u578B\u3001\u6D6E\u70B9\u6570\u3001\u6307\u9488\u3001<strong>\u7ED3\u6784\u3001\u5BF9\u8C61</strong>(c++\u4E0D\u80FD\u76F4\u63A5\u8FD4\u56DE\u6570\u7EC4,\u4F46\u662F\u53EF\u4EE5\u5C06\u6570\u7EC4\u4F5C\u4E3A\u7ED3\u6784\u6216\u8005\u5BF9\u8C61\u7EC4\u6210\u90E8\u5206\u6765\u8FD4\u56DE)</p><h4 id="\u51FD\u6570\u539F\u578B" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u539F\u578B" aria-hidden="true">#</a> \u51FD\u6570\u539F\u578B</h4><ol><li>\u51FD\u6570\u539F\u578B:\u63CF\u8FF0\u4E86\u51FD\u6570\u5230\u7F16\u8BD1\u5668\u7684\u63A5\u53E3,\u5C06\u51FD\u6570\u8FD4\u56DE\u503C\u7684\u7C7B\u578B(\u5982\u679C\u6709\u7684\u8BDD)\u4EE5\u53CA\u53C2\u6570\u7684\u7C7B\u578B\u548C\u6570\u91CF\u544A\u8BC9\u7F16\u8BD1\u5668</li><li>\u539F\u578B\u8BED\u6CD5:\u51FD\u6570\u539F\u578B\u662F\u4E00\u6761\u8BED\u53E5,\u5FC5\u987B\u4EE5\u5206\u53F7\u7ED3\u675F,\u6700\u7B80\u5355\u7684\u65B9\u6CD5\u5C31\u662F\u590D\u5236\u51FD\u6570\u5934,</li><li>\u539F\u578B\u529F\u80FD:\u786E\u4FDD\u7F16\u8BD1\u5668\u6B63\u786E\u5904\u7406\u51FD\u6570\u8FD4\u56DE\u503C\u3001\u7F16\u8BD1\u5668\u68C0\u67E5\u4F7F\u7528\u7684\u53C2\u6570\u76EE\u5F55\u662F\u5426\u6B63\u786E\u3001\u7F16\u8BD1\u5668\u68C0\u67E5\u4F7F\u7528\u53C2\u6570\u7C7B\u578B\u662F\u5426\u6B63\u786E,\u4E0D\u6B63\u786E\u5219\u8F6C\u6362\u4E3A\u6B63\u786E\u7684\u7C7B\u578B(\u5982\u679C\u53EF\u80FD\u7684\u8BDD)</li></ol><div class="custom-container tip"><p class="custom-container-title">\u901A\u5E38\u5728\u539F\u578B\u53C2\u6570\u5217\u8868\u4E2D\u53EF\u4EE5\u5305\u542B\u53D8\u91CF\u540D,\u4E5F\u53EF\u4EE5\u4E0D\u5305\u542B.\u539F\u578B\u4E2D\u7684\u53D8\u91CF\u540D\u76F8\u5F53\u4E8E\u5360\u4F4D\u7B26,\u56E0\u6B64\u4E0D\u5FC5\u4E0E\u51FD\u6570\u5B9A\u4E49\u4E2D\u7684\u53D8\u91CF\u540D\u76F8\u540C</p></div><h3 id="\u51FD\u6570\u548C\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u548C\u6570\u7EC4" aria-hidden="true">#</a> \u51FD\u6570\u548C\u6570\u7EC4</h3><p>cookies\u662F\u6570\u7EC4\u540D,\u524D\u9762\u4ECB\u7ECD\u8FC7,C++\u5C06\u6570\u7EC4\u540D\u89E3\u91CA\u4E3A\u5176\u7B2C\u4E00\u4E2A\u5143\u7D20\u7684\u5730\u5740:</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>cookies <span class="token operator">==</span> <span class="token operator">&amp;</span>cookies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u5F53\u6211\u4EEC\u5B9A\u4E49\u51FD\u6570<code>int sum = sum_arr(int arr[], int n)</code>\u65F6\u5019\u771F\u6B63\u7684\u51FD\u6570\u5934\u5E94\u8BE5\u662F\u8FD9\u6837\u7684:</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">sum_arr</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u5C06\u6570\u7EC4\u4F5C\u4E3A\u51FD\u6570\u7684\u53C2\u6570\u610F\u5473\u7740:\u7A0B\u5E8F\u5B9E\u9645\u5E76\u6CA1\u6709\u5C06\u6570\u7EC4\u5185\u5BB9\u4F20\u9012\u7ED9\u51FD\u6570,\u800C\u662F\u5C06\u6570\u7EC4\u7684\u5730\u5740,\u5305\u542B\u5143\u7D20\u79CD\u7C7B\u548C\u5143\u7D20\u6570\u76EE\u63D0\u4F9B\u7ED9\u51FD\u6570</p>`,13),M=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"int"),s(" ArSize "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"8"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"sum_arr"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" arr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" n"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" cookies"),n("span",{class:"token punctuation"},"["),s("ArSize"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"8"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"16"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"32"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"64"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"128"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(" cookies "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'" = array address, "'),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token keyword"},"sizeof"),s(" cookies "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'" = sizeof cookies\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" sum "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"sum_arr"),n("span",{class:"token punctuation"},"("),s("cookies"),n("span",{class:"token punctuation"},","),s(" ArSize"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Total cookies eaten: "'),s(),n("span",{class:"token operator"},"<<"),s(" sum "),n("span",{class:"token operator"},"<<"),s(" std"),n("span",{class:"token double-colon punctuation"},"::"),s("endl"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// \u524D\u9762\u4E09\u4E2A\u5143\u7D20\u7684\u548C,\u63D0\u4F9B\u4E86\u4E00\u4E2A\u5047\u7684\u5143\u7D20\u4E2A\u6570"),s(`
    sum `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"sum_arr"),n("span",{class:"token punctuation"},"("),s("cookies"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"First three eaters ate "'),s(),n("span",{class:"token operator"},"<<"),s(" sum "),n("span",{class:"token operator"},"<<"),n("span",{class:"token string"},'"cookies\\n"'),n("span",{class:"token punctuation"},";"),s(` 
    `),n("span",{class:"token comment"},"//\u540E\u9762\u56DB\u4E2A\u5143\u7D20\u7684\u548C,\u63D0\u4F9B\u4E86\u4E00\u4E2A\u5047\u7684\u8D77\u59CB\u4F4D\u548C\u5047\u7684\u5143\u7D20\u4E2A\u6570    "),s(`
    `),n("span",{class:"token comment"},"// sum = sum_arr(cookies + 4, 4);"),s(`
    sum `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"sum_arr"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("cookies"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),n("span",{class:"token comment"},"//\u4E0E\u4E0A\u4E00\u53E5\u542B\u4E49\u76F8\u540C"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Last four eaters ate"'),s(),n("span",{class:"token operator"},"<<"),s(" sum "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'" cookies\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"sum_arr"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" arr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" n"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" total "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(" arr "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'" = arr"'),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token keyword"},"sizeof"),s(" arr "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'" = sizeof arr\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s("n"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        total `),n("span",{class:"token operator"},"="),s(" total "),n("span",{class:"token operator"},"+"),s(" arr"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" total"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"},"\xA0"),n("div",{class:"highlight-line"},"\xA0"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=n("div",{class:"language-c ext-c line-numbers-mode"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token comment"},`/*
0x7fffffffdc20 = array address, 32 = sizeof cookies
0x7fffffffdc20 = arr8 = sizeof arr
Total cookies eaten: 255
0x7fffffffdc20 = arr8 = sizeof arr
First three eaters ate 7 cookies
0x7fffffffdc30 = arr8 = sizeof arr
Last four eaters ate240 cookies
*/`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),K=p(`<div class="custom-container tip"><p class="custom-container-title">\u6CE8\u610F\u4F7F\u7528**const**\u4FDD\u62A4\u6570\u7EC4,\u9632\u6B62\u6570\u7EC4\u88AB\u4FEE\u6539,\u9700\u8981\u4FEE\u6539\u65F6\u5219\u4E0D\u52A0const</p><p><code>void array(const double arr[], int n)</code></p></div><h4 id="\u51FD\u6570\u548C\u4E8C\u7EF4\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u548C\u4E8C\u7EF4\u6570\u7EC4" aria-hidden="true">#</a> \u51FD\u6570\u548C\u4E8C\u7EF4\u6570\u7EC4</h4><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u4EE5\u4E8C\u7EF4\u6570\u7EC4\u4F5C\u4E3A\u53C2\u6570\u7684\u51FD\u6570\u539F\u578B</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u53EF\u8BFB\u6027\u66F4\u597D\u7684\u5B9A\u4E49\u5982\u4E0B:</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="\u51FD\u6570\u548Cc-\u98CE\u683C\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u548Cc-\u98CE\u683C\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u51FD\u6570\u548CC-\u98CE\u683C\u5B57\u7B26\u4E32</h3><p><strong>\u5047\u8BBE\u8981\u5C06\u5B57\u7B26\u4E32\u4F5C\u4E3A\u53C2\u6570\u4F20\u9012\u7ED9\u51FD\u6570,\u5219\u8868\u793A\u5B57\u7B26\u4E32\u7684\u65B9\u5F0F\u5982\u4E0B</strong>:</p><ul><li>char\u6570\u7EC4<code>char gost[15] = &quot;galloping&quot;</code></li><li>\u7528\u5F15\u53F7\u62EC\u8D77\u6765\u7684\u5B57\u7B26\u4E32\u5E38\u91CF <code>char * str = &quot;galloping&quot;</code></li><li>\u88AB\u8BBE\u7F6E\u4E3A\u5B57\u7B26\u4E32\u7684\u5730\u5740\u7684char\u6307\u9488<br> \u4E0A\u8FF0\u4E09\u79CD\u7C7B\u578B\u90FD\u662Fchar\u6307\u9488(\u51C6\u786E\u662Fchar*),\u4E0B\u9762\u4F7F\u7528\u6307\u9488\u5BF9char\u7C7B\u578B\u8FDB\u884C\u904D\u5386</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span>
    <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token comment">// \u76F4\u63A5\u7528\u6307\u9488\u6307\u5411\u5B57\u7B26\u4E32,\u8FD9\u6837\u624D\u80FD\u4FEE\u6539\u6307\u5411\u5B57\u7B26\u4E32\u6307\u9488\u7684\u503C</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>ch <span class="token operator">=</span> <span class="token string">&quot;mmmuuullllnnn&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// char ch[14] = &quot;mmmuuullllnnn&quot;;  \u8FD9\u6837*ch\u4E0D\u53EF\u4FEE\u6539</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ch <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> ch <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>ch<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ch <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>ch<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u8FD4\u56DEC-\u98CE\u683C\u5B57\u7B26\u4E32\u7684\u51FD\u6570</strong></p><div class="custom-container danger"><p class="custom-container-title">\u51FD\u6570\u65E0\u6CD5\u8FD4\u56DE\u5B57\u7B26\u4E32,\u4F46\u662F\u53EF\u4EE5\u8FD4\u56DE\u5B57\u7B26\u4E32\u7684\u5730\u5740,\u8FD9\u6837\u505A\u6548\u7387\u66F4\u9AD8</p></div><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">buildstr</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
    <span class="token keyword">int</span> times<span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Enter a character: &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> ch<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Enter an integer: &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> times<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>ps <span class="token operator">=</span> <span class="token function">buildstr</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> times<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> ps <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> ps<span class="token punctuation">;</span>
    ps <span class="token operator">=</span> <span class="token function">buildstr</span><span class="token punctuation">(</span><span class="token char">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> ps <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;-DONE-&quot;</span> <span class="token operator">&lt;&lt;</span> ps <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> ps<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">buildstr</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span> pstr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//\u4ECE\u540E\u5411\u524D\u586B\u5145,\u907F\u514D\u4E86\u4F7F\u7528\u989D\u5916\u7684\u53D8\u91CF</span>
    <span class="token comment">// int i = 0;</span>
    <span class="token comment">// while (i &lt; n)</span>
    <span class="token comment">// {</span>
    <span class="token comment">//     pstr[i++] = c;/* code */</span>
    <span class="token comment">// } </span>
    pstr<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        pstr<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
    <span class="token keyword">return</span> pstr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
Enter a character: V
Enter an integer: 46
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
++++++++++++++++++++-DONE-++++++++++++++++++++
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u51FD\u6570\u548C\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u548C\u7ED3\u6784" aria-hidden="true">#</a> \u51FD\u6570\u548C\u7ED3\u6784</h3><p>\u51FD\u6570\u53EF\u4EE5\u8FD4\u56DE\u7ED3\u6784,<strong>\u7ED3\u6784\u540D\u53EA\u662F\u7ED3\u6784\u7684\u540D\u79F0,\u8981\u83B7\u53D6\u7ED3\u6784\u7684\u5730\u5740\u5FC5\u987B\u4F7F\u7528\u5730\u5740\u8FD0\u7B97\u7B26&amp;</strong>,\u4F7F\u7528\u7ED3\u6784\u65F6\u5C06\u7ED3\u6784\u4F5C\u4E3A\u53C2\u6570\u4F20\u9012,\u5E76\u5728\u9700\u8981\u7684\u65F6\u5019\u5C06\u7ED3\u6784\u4F5C\u4E3A\u8FD4\u56DE\u503C</p><div class="custom-container warning"><p class="custom-container-title">\u6309\u503C\u4F20\u9012\u7ED3\u6784\u5982\u679C\u7ED3\u6784\u975E\u5E38\u5927,\u590D\u5236\u7ED3\u6784\u4F1A\u589E\u52A0\u5185\u5B58\u8981\u6C42,\u964D\u4F4E\u8FD0\u884C\u901F\u5EA6,\u6240\u4EE5\u503E\u5411\u4E8E\u4F20\u9012\u7ED3\u6784\u7684\u5730\u5740</p></div><p><strong>\u4F20\u9012\u548C\u8FD4\u56DE\u7ED3\u6784</strong></p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">travel_time</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> hours<span class="token punctuation">;</span>
    <span class="token keyword">int</span> mins<span class="token punctuation">;</span>
    <span class="token comment">/* data */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
travel_time <span class="token function">sum</span><span class="token punctuation">(</span>travel_time t1<span class="token punctuation">,</span> travel_time t2<span class="token punctuation">)</span><span class="token punctuation">;</span>

travel_time <span class="token function">sum</span><span class="token punctuation">(</span>travel_time t1<span class="token punctuation">,</span> travel_time t2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    travel_time total<span class="token punctuation">;</span>
    total<span class="token punctuation">.</span>mins <span class="token operator">=</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>mins <span class="token operator">+</span> t2<span class="token punctuation">.</span>mins<span class="token punctuation">)</span> <span class="token operator">%</span> Mins_per_hr<span class="token punctuation">;</span>
    total<span class="token punctuation">.</span>hours <span class="token operator">=</span> t1<span class="token punctuation">.</span>hours <span class="token operator">+</span> t2<span class="token punctuation">.</span>hours <span class="token operator">+</span> 
                    <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>mins <span class="token operator">+</span> t2<span class="token punctuation">.</span>mins<span class="token punctuation">)</span> <span class="token operator">/</span> Mins_per_hr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> total<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u53E6\u4E00\u4E2A\u5904\u7406\u7ED3\u6784\u7684\u51FD\u6570\u793A\u4F8B</strong></p><ol><li>\u76F4\u89D2\u5750\u6807</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">rect</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> x<span class="token punctuation">;</span>
    <span class="token keyword">double</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>\u6781\u5750\u6807</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">polar</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> distance<span class="token punctuation">;</span>
    <span class="token keyword">double</span> angle<span class="token punctuation">;</span> <span class="token comment">//    \u4E58\u4EE5180/pi\u8F6C\u5316\u4E3A\u89D2\u5EA6</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u51FD\u6570\u548Cstring\u5BF9\u8C61" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u548Cstring\u5BF9\u8C61" aria-hidden="true">#</a> \u51FD\u6570\u548Cstring\u5BF9\u8C61</h3>`,25),L=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<string>")]),s(`
`),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token keyword"},"namespace"),s(" std"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"int"),s(" SIZE "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"display"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(" string sa"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" n"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    string list`),n("span",{class:"token punctuation"},"["),s("SIZE"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Enter your "'),s(),n("span",{class:"token operator"},"<<"),s(" SIZE "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"favorite astronomical sights:\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" SIZE"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(" i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'": "'),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"getline"),n("span",{class:"token punctuation"},"("),s("cin"),n("span",{class:"token punctuation"},","),s("list"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Your list:\\n"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"display"),n("span",{class:"token punctuation"},"("),s("list"),n("span",{class:"token punctuation"},","),s("SIZE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"display"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(" string sa"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" n"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" n"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(`
        cout `),n("span",{class:"token operator"},"<<"),s(" i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'": "'),s(),n("span",{class:"token operator"},"<<"),s("sa"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},`/*
Enter your 5favorite astronomical sights:
1: origin
2: m13
3: saturn
4: jup
5: moon
Your list:
1: origin
2: m13
3: saturn
4: jup
5: moon
*/`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Z=p(`<h3 id="\u51FD\u6570\u548Carray\u5BF9\u8C61" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u548Carray\u5BF9\u8C61" aria-hidden="true">#</a> \u51FD\u6570\u548Carray\u5BF9\u8C61</h3><p>\u4E0D\u4F1A\u7528</p><h3 id="\u9012\u5F52" tabindex="-1"><a class="header-anchor" href="#\u9012\u5F52" aria-hidden="true">#</a> \u9012\u5F52</h3><p><strong>\u9012\u5F52:\u51FD\u6570\u81EA\u5DF1\u8C03\u7528\u81EA\u5DF1</strong>,\u4F7F\u7528\u65AD\u70B9\u8C03\u8BD5\u53EF\u4EE5\u8F7B\u677E\u770B\u51FA\u9012\u5F52\u8FD0\u884C\u7684\u6D41\u7A0B</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">recurs</span><span class="token punctuation">(</span>argumentlist<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    statements1
    <span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span>
        <span class="token function">recurs</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
    statements2
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6709\u8DA3\u7684\u662F:if\u4E3Atrue\u65F6,\u6BCF\u4E2Arecurs()\u8C03\u7528\u90FD\u5C06\u6267\u884Cstatements1,\u7136\u540E\u518D\u8C03\u7528recurs(),\u800C\u4E0D\u4F1A\u6267\u884Cstatements2,\u5F53if\u4E3Afalse\u65F6,\u5F53\u524D\u8C03\u7528\u4F1A\u6267\u884Cstatements2,\u6267\u884C\u540E\u7A0B\u5E8F\u63A7\u5236\u6743\u5C06\u8FD4\u56DE\u7ED9\u8C03\u7528\u5B83\u7684recurs(),\u4EE5\u6B64\u7C7B\u63A8.<strong>\u5219\u5F53statements1\u6267\u884C\u5B8C\u540E,statements2\u5C06\u4EE5\u51FD\u6570\u8C03\u7528\u76F8\u53CD\u7684\u987A\u5E8F\u6267\u884C</strong>,\u4EE5\u4E0B\u7A0B\u5E8F\u6F14\u793A\u4E86\u8FD9\u79CD\u884C\u4E3A</p>`,6),B=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`
`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"countdown"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" n"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"countdown"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"countdown"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" n"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token keyword"},"namespace"),s(" std"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"Counting down ... "'),s(),n("span",{class:"token operator"},"<<"),s(" n "),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("n "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token function"},"countdown"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    cout `),n("span",{class:"token operator"},"<<"),s(" n "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'": Kaboom!\\n"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),H=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},`/*
Counting down ... 4
Counting down ... 3
Counting down ... 2
Counting down ... 1
Counting down ... 0
0: Kaboom!
1: Kaboom!
2: Kaboom!
3: Kaboom!
4: Kaboom!
*/`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=p(`<h3 id="\u51FD\u6570\u6307\u9488" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u6307\u9488" aria-hidden="true">#</a> \u51FD\u6570\u6307\u9488</h3><ul><li>\u83B7\u53D6\u51FD\u6570\u7684\u5730\u5740:\u51FD\u6570\u540D\u79F0\u5219\u662F\u51FD\u6570\u5730\u5740</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token function">think</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// thought\u8C03\u7528think,\u5E76\u5C06think\u51FD\u6570\u8FD4\u56DE\u503C\u4F20\u7ED9thought\u51FD\u6570</span>
<span class="token function">thought</span><span class="token punctuation">(</span><span class="token function">think</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
</code></pre><div class="highlight-lines"><br><div class="highlight-line">\xA0</div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u58F0\u660E\u51FD\u6570\u6307\u9488<br> \u4F8B\u5982\u51FD\u6570\u539F\u578B\u662F<code>double pam(int)</code>\u5219\u51FD\u6570\u6307\u9488\u7C7B\u578B\u58F0\u660E\u4E3A:</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4E3A\u4E86\u63D0\u4F9B\u8FD0\u7B97\u7B26\u4F18\u5148\u7EA7\u5FC5\u987B\u628A*pf\u62EC\u8D77\u6765</span>
pf <span class="token operator">=</span> pam<span class="token punctuation">;</span> <span class="token comment">// \u5C06\u51FD\u6570\u5730\u5740\u8D4B\u7ED9\u51FD\u6570\u6307\u9488</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line">\xA0</div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u4F7F\u7528\u51FD\u6570\u6307\u9488\u8C03\u7528\u51FD\u6570</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token function">pam</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4F7F\u7528\u51FD\u6570\u6307\u9488\u8C03\u7528\u51FD\u6570</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line">\xA0</div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u6848\u4F8B</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">double</span> <span class="token function">betsy</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token function">pam</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">estimate</span><span class="token punctuation">(</span><span class="token keyword">int</span> lines<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
    <span class="token keyword">int</span> code<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;How many lines of code do you need:   &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> code<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Here&#39;s Betsy&#39;s estimate:   \\n&quot;</span><span class="token punctuation">;</span>
    <span class="token function">estimate</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> betsy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Here&#39;s pam&#39;s estimate:   \\n&quot;</span><span class="token punctuation">;</span>
    <span class="token function">estimate</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> pam<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>

<span class="token punctuation">}</span>
<span class="token keyword">double</span> <span class="token function">betsy</span><span class="token punctuation">(</span><span class="token keyword">int</span> lns<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0.05</span> <span class="token operator">*</span> lns<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">double</span> <span class="token function">pam</span><span class="token punctuation">(</span><span class="token keyword">int</span> lns<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0.03</span> <span class="token operator">*</span> lns <span class="token operator">+</span> <span class="token number">0.0004</span> <span class="token operator">*</span> lns <span class="token operator">*</span> lns<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">estimate</span><span class="token punctuation">(</span><span class="token keyword">int</span> lines<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> lines <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;  lines will take   &quot;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;  hour(s)  \\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
How many lines of code do you need:   30
Here&#39;s Betsy&#39;s estimate:   
30  lines will take   1.5  hour(s)  
Here&#39;s pam&#39;s estimate:   
30  lines will take   1.26  hour(s) 
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6DF1\u5165\u63A2\u8BA8\u51FD\u6570\u6307\u9488\u6CA1\u770B" tabindex="-1"><a class="header-anchor" href="#\u6DF1\u5165\u63A2\u8BA8\u51FD\u6570\u6307\u9488\u6CA1\u770B" aria-hidden="true">#</a> \u6DF1\u5165\u63A2\u8BA8\u51FD\u6570\u6307\u9488\u6CA1\u770B</h2><h2 id="\u5185\u5B58\u6A21\u578B\u548C\u540D\u79F0\u7A7A\u95F4" tabindex="-1"><a class="header-anchor" href="#\u5185\u5B58\u6A21\u578B\u548C\u540D\u79F0\u7A7A\u95F4" aria-hidden="true">#</a> \u5185\u5B58\u6A21\u578B\u548C\u540D\u79F0\u7A7A\u95F4</h2><h2 id="\u5BF9\u8C61\u548C\u7C7B" tabindex="-1"><a class="header-anchor" href="#\u5BF9\u8C61\u548C\u7C7B" aria-hidden="true">#</a> \u5BF9\u8C61\u548C\u7C7B</h2><div class="custom-container tip"><p class="custom-container-title">OOP</p><p>\u62BD\u8C61\u3001\u5C01\u88C5\u548C\u6570\u636E\u9690\u85CF\u3001\u591A\u6001\u3001\u7EE7\u627F\u3001\u4EE3\u7801\u7684\u53EF\u91CD\u7528\u6027</p></div><div class="custom-container warning"><p class="custom-container-title">\u7C7B\u4E0E\u7ED3\u6784\u552F\u4E00\u7684\u533A\u522B\u662F:\u7ED3\u6784\u7684\u9ED8\u8BA4\u8BBF\u95EE\u7C7B\u578B\u662Fpublic,\u800C\u7C7B\u4E3Aprivate</p></div><h3 id="\u62BD\u8C61\u548C\u7C7B" tabindex="-1"><a class="header-anchor" href="#\u62BD\u8C61\u548C\u7C7B" aria-hidden="true">#</a> \u62BD\u8C61\u548C\u7C7B</h3><ul><li><strong>\u5B9E\u73B0\u7C7B</strong><br> \u7C7B\u89C4\u8303\u4E00\u822C\u7531\u4E24\u4E2A\u90E8\u5206\u7EC4\u6210-\u7C7B\u58F0\u660E\u3001\u7C7B\u5B9A\u4E49.\u7C7B\u58F0\u660E\u662F\u84DD\u56FE,\u65B9\u6CD5\u5B9A\u4E49\u63D0\u4F9B\u7EC6\u8282</li></ul><ol><li><strong>\u7C7B\u58F0\u660E:\u4EE5\u6570\u636E\u6210\u5458\u7684\u65B9\u5F0F\u63CF\u8FF0\u6570\u636E\u90E8\u5206,\u4EE5\u6210\u5458\u51FD\u6570(\u88AB\u79F0\u4E3A\u65B9\u6CD5)\u7684\u65B9\u5F0F\u63CF\u8FF0\u516C\u6709\u63A5\u53E3</strong></li></ol><details class="custom-container details"><summary>stock00.h</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">STOCK00_H_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STOCK00_H_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token keyword">class</span> <span class="token class-name">Stock</span>
<span class="token punctuation">{</span>
    <span class="token comment">//\u5C06\u6570\u636E\u5C01\u88C5\u5230\u79C1\u6709\u90E8\u5206\u53EF\u4EE5\u4FDD\u62A4\u6570\u636E\u5B8C\u6574\u6027,\u6570\u636E\u9690\u85CF</span>
    <span class="token comment">//\u53EA\u80FD\u901A\u8FC7\u516C\u6709\u6210\u5458\u8BBF\u95EE,\u5176\u5B9E\u4E0D\u5FC5\u4F7F\u7528(\u6570\u636E\u9690\u85CF),\u8FD9\u662F\u7C7B\u5BF9\u8C61\u7684\u9ED8\u8BA4\u8BBF\u95EE\u63A7\u5236</span>
    <span class="token keyword">private</span><span class="token operator">:</span>  
        std<span class="token double-colon punctuation">::</span>string company<span class="token punctuation">;</span>
        <span class="token keyword">long</span> shares<span class="token punctuation">;</span>
        <span class="token keyword">double</span> share_val<span class="token punctuation">;</span>
        <span class="token keyword">double</span> total_val<span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">set_tot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//\u5185\u8054\u51FD\u6570,\u4E5F\u53EF\u4EE5\u5199\u5728\u5916\u9762</span>
        <span class="token punctuation">{</span>
            total_val <span class="token operator">=</span> shares <span class="token operator">*</span> share_val<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token comment">//\u5199\u5728\u7C7B\u5916\u9762\u4E86</span>
        <span class="token keyword">void</span> <span class="token function">set_tot_inline_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//\u516C\u5171\u63A5\u53E3\u7684\u7C7B\u6210\u5458\u51FD\u6570</span>
        <span class="token comment">//\u6784\u9020\u51FD\u6570\u3001\u6790\u6784\u51FD\u6570\u58F0\u660E</span>
        <span class="token comment">//\u6784\u9020\u51FD\u6570:\u6784\u9020\u5E76\u521D\u59CB\u5316\u5BF9\u8C61</span>
        <span class="token function">Stock</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span> co<span class="token punctuation">,</span> <span class="token keyword">long</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">double</span> pr <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//\u6790\u6784\u51FD\u6570:\u5BF9\u8C61\u8FC7\u671F\u65F6\u8C03\u7528,\u7528\u6765\u5B8C\u6210\u6E05\u7406\u5DE5\u4F5C,\u6790\u6784\u51FD\u6570\u6CA1\u6709\u53C2\u6570</span>
        <span class="token operator">~</span><span class="token function">Stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//this\u6307\u9488</span>
        <span class="token keyword">const</span> Stock <span class="token operator">&amp;</span> <span class="token function">topval</span><span class="token punctuation">(</span><span class="token keyword">const</span> Stock <span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
        
        <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span> co<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> pr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token keyword">long</span> num<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">long</span> num<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u7C7B\u6210\u5458\u53EF\u4EE5\u662F\u6570\u636E\u7C7B\u578B\u4E5F\u53EF\u4EE5\u662F\u51FD\u6570</span>
        <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//\u5199\u5728\u7C7B\u5916\u9762\u7684\u51FD\u6570\u9700\u8981\u52A0\u4E0Ainline\u9650\u5B9A\u7B26(\u5185\u8054\u51FD\u6570)</span>
<span class="token comment">//\u4E00\u822C\u4E0D\u8981\u76F4\u63A5\u5199\u5728.h\u6587\u4EF6\u4E2D</span>
<span class="token comment">//\u5199\u5230\u4E13\u95E8\u7684\u7C7B\u6210\u5458\u51FD\u6570\u6587\u4EF6\u4E2D</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token class-name">Stock</span><span class="token double-colon punctuation">::</span><span class="token function">set_tot_inline_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   
<span class="token punctuation">{</span>
        total_val <span class="token operator">=</span> shares <span class="token operator">*</span> share_val<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ol start="2"><li><strong>\u7C7B\u65B9\u6CD5\u5B9A\u4E49:\u63CF\u8FF0\u5982\u4F55\u5B9E\u73B0\u7C7B\u6210\u5458\u51FD\u6570</strong></li></ol><details class="custom-container details"><summary>stock00.cpp</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stock00.h&quot;</span></span>
<span class="token comment">//\u4F7F\u7528\u4F5C\u7528\u57DF\u89E3\u6790\u51FD\u6570\u5224\u65AD\u6210\u5458\u51FD\u6570\u5C5E\u4E8E\u54EA\u4E2A\u7C7B</span>
<span class="token keyword">void</span> <span class="token class-name">Stock</span><span class="token double-colon punctuation">::</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span> co<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> pr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    company <span class="token operator">=</span> co<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;number of shares can&#39;t be negtive&quot;</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;company &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;shares set to 0.\\n &quot;</span><span class="token punctuation">;</span>
        shares <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
        shares <span class="token operator">=</span> n<span class="token punctuation">;</span>
    share_val <span class="token operator">=</span> pr<span class="token punctuation">;</span>
    <span class="token function">set_tot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token class-name">Stock</span><span class="token double-colon punctuation">::</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token keyword">long</span> num<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;number of shares purchased can&#39;t be negative&quot;</span>
                    <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;transaction id aborted.\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        shares <span class="token operator">+=</span> num<span class="token punctuation">;</span>
        share_val <span class="token operator">=</span> price<span class="token punctuation">;</span>
        <span class="token function">set_tot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token class-name">Stock</span><span class="token double-colon punctuation">::</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">long</span> num<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;Number of shares sold can&#39;t be negative&quot;</span>
            <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; Transaction is aborted.\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> shares<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;You can&#39;t sell more than you have!&quot;</span>
                <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; Transaction is aborted.\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        shares <span class="token operator">-=</span>num<span class="token punctuation">;</span>
        share_val <span class="token operator">=</span> price<span class="token punctuation">;</span>
        <span class="token function">set_tot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token class-name">Stock</span><span class="token double-colon punctuation">::</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Company: &quot;</span> <span class="token operator">&lt;&lt;</span> company
                <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Shares: &quot;</span> <span class="token operator">&lt;&lt;</span> shares <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl
                <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Share Price:  $&quot;</span> <span class="token operator">&lt;&lt;</span> share_val
                <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Share Worth:   $&quot;</span> <span class="token operator">&lt;&lt;</span> total_val <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token class-name">Stock</span><span class="token double-colon punctuation">::</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    share_val <span class="token operator">=</span> price<span class="token punctuation">;</span>
    <span class="token function">set_tot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u521B\u5EFA\u6784\u9020\u51FD\u6570\u521D\u59CB\u5316Stock\u5BF9\u8C61</span>
<span class="token class-name">Stock</span><span class="token double-colon punctuation">::</span><span class="token function">Stock</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span> co<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> pr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    company <span class="token operator">=</span> co<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;number of shares can&#39;t be negtive&quot;</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;company &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;shares set to 0.\\n &quot;</span><span class="token punctuation">;</span>
        shares <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
        shares <span class="token operator">=</span> n<span class="token punctuation">;</span>
    share_val <span class="token operator">=</span> pr<span class="token punctuation">;</span>
    <span class="token function">set_tot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u521B\u5EFA\u6790\u6784\u51FD\u6570--\u6790\u6784\u51FD\u6570\u4E0D\u627F\u62C5\u5DE5\u4F5C,\u6240\u4EE5\u53EF\u4EE5\u4E0D\u6267\u884C\u4EFB\u4F55\u64CD\u4F5C</span>
<span class="token comment">//\u901A\u5E38\u4E0D\u663E\u5F0F\u8C03\u7528\u6790\u6784\u51FD\u6570</span>
<span class="token class-name">Stock</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//\u4E3A\u4E86\u770B\u6E05\u6790\u6784\u51FD\u6570\u4F55\u65F6\u88AB\u8C03\u7528</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Bye, &quot;</span> <span class="token operator">&lt;&lt;</span> company <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//this\u6307\u9488:\u6307\u5411\u8C03\u7528\u6210\u5458\u51FD\u6570\u7684\u5BF9\u8C61</span>
<span class="token keyword">const</span> Stock <span class="token operator">&amp;</span> <span class="token class-name">Stock</span><span class="token double-colon punctuation">::</span><span class="token function">topval</span><span class="token punctuation">(</span><span class="token keyword">const</span> Stock <span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
    <span class="token comment">//\u8FD9\u91CC\u9762\u7684total_val\u5176\u5B9E\u662F this-&gt;total_val</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>total_val <span class="token operator">&gt;</span> total_val<span class="token punctuation">)</span>
        <span class="token keyword">return</span> s<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token comment">//test git </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li><strong>\u4F7F\u7528\u7C7B</strong><br> \u5C06\u51FD\u6570\u58F0\u660E\u6587\u4EF6\u3001\u7C7B\u6210\u5458\u51FD\u6570\u6587\u4EF6\u3001\u4E3B\u6587\u4EF6\u4E00\u8D77\u7F16\u8BD1,\u751F\u6210\u53EF\u6267\u884C\u6587\u4EF6usestock00.exe</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>g++ -o usestock00.exe usestock00.cpp stock00.h stock00.cpp usestock00.cpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="custom-container details"><summary>\u4E3B\u6587\u4EF6usestock00.cpp</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stock00.h&quot;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>   <span class="token comment">//\u4E3A\u7C7BStock\u521B\u5EFA\u4E00\u4E2A\u540D\u4E3Afu\u7684\u5BF9\u8C61\u5E76\u4F7F\u7528\u6784\u9020\u51FD\u6570Stock\u521D\u59CB\u5316\u7C7B</span>
    <span class="token comment">//\u5BF9\u8C61\u53EF\u4EE5\u8C03\u7528\u65B9\u6CD5\u4F46\u662F\u4E0D\u80FD\u8C03\u7528\u6784\u9020\u51FD\u6570,\u56E0\u4E3A\u5728\u6784\u9020\u51FD\u6570\u6784\u9020\u51FA\u5BF9\u8C61\u4E4B\u524D,\u5BF9\u8C61\u662F\u4E0D\u5B58\u5728\u7684</span>
    <span class="token comment">//\u56E0\u6B64\u6784\u9020\u51FD\u6570\u88AB\u7528\u6765\u521B\u5EFA\u5BF9\u8C61,\u800C\u4E0D\u80FD\u901A\u8FC7\u5BF9\u8C61\u8C03\u7528</span>
    <span class="token comment">//\u663E\u5F0F\u8C03\u7528\u6784\u9020\u51FD\u6570</span>
    Stock fu <span class="token operator">=</span> <span class="token function">Stock</span><span class="token punctuation">(</span><span class="token string">&quot;Furry Mason&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//\u9690\u5F0F\u8C03\u7528\u6784\u9020\u51FD\u6570</span>
    <span class="token comment">//Stock fu(&quot;Furry Mason&quot;, 50, 2.5);</span>
    <span class="token comment">//\u5C06\u6784\u9020\u51FD\u6570\u4E0Enew\u4E00\u8D77\u4F7F\u7528</span>
    <span class="token comment">// Stock *pstock = new Stock(&quot;Furry Mason&quot;, 50, 2.5);</span>
    <span class="token comment">//\u521B\u5EFA\u4E00\u4E2AStock\u5BF9\u8C61\u5E76\u5C06\u521D\u59CB\u5316\u4E3A\u53C2\u6570\u63D0\u4F9B\u7684\u503C,\u5E76\u5C06\u8BE5\u5BF9\u8C61\u8D4B\u503C\u7ED9pstock\u6307\u9488</span>
    fu<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token string">&quot;NanoSmart&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">12.50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u4F7F\u7528\u7C7B\u6210\u5458\u51FD\u6570</span>
    fu<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fu<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">18.125</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fu<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fu<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">20.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fu<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fu<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token number">300000</span><span class="token punctuation">,</span> <span class="token number">40.125</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fu<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fu<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">,</span> <span class="token number">0.125</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fu<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">/*
Company: NanoSmartShares: 20
Share Price:  $12.5Share Worth:   $250
Company: NanoSmartShares: 35
Share Price:  $18.125Share Worth:   $634.375
You can&#39;t sell more than you have! Transaction is aborted.
Company: NanoSmartShares: 35
Share Price:  $18.125Share Worth:   $634.375
Company: NanoSmartShares: 300035
Share Price:  $40.125Share Worth:   $1.20389e+07
Company: NanoSmartShares: 270035
Share Price:  $0.125Share Worth:   $33754.4
Bye, NanoSmart
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="\u7C7B\u7684\u6784\u9020\u51FD\u6570\u548C\u6790\u6784\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u7C7B\u7684\u6784\u9020\u51FD\u6570\u548C\u6790\u6784\u51FD\u6570" aria-hidden="true">#</a> \u7C7B\u7684\u6784\u9020\u51FD\u6570\u548C\u6790\u6784\u51FD\u6570</h3><p>\u4E3A\u4E86\u5728\u6784\u9020\u5BF9\u8C61\u540E\u81EA\u52A8\u521D\u59CB\u5316\u5BF9\u8C61,C++\u63D0\u4F9B\u4E86\u4E00\u4E2A\u7279\u6B8A\u7684\u6210\u5458\u51FD\u6570-<strong>\u7C7B\u6784\u9020\u51FD\u6570,\u4E13\u95E8\u7528\u4E8E\u6784\u9020\u65B0\u5BF9\u8C61\u3001\u5C06\u503C\u8D4B\u7ED9\u5B83\u4EEC\u7684\u6570\u636E\u6210\u5458</strong> \u6784\u9020\u51FD\u6570\u6CA1\u6709\u8FD4\u56DE\u503C,\u4F46\u6CA1\u6709\u88AB\u58F0\u660E\u4E3Avoid\u7C7B\u578B,\u5B9E\u9645\u4E0A<strong>\u6784\u9020\u51FD\u6570\u6CA1\u6709\u58F0\u660E\u7C7B\u578B</strong></p><ol><li>\u58F0\u660E\u548C\u5B9A\u4E49\u6784\u9020\u51FD\u6570</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// \u58F0\u660E\u6784\u9020\u51FD\u6570</span>
<span class="token function">Stock</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span> co<span class="token punctuation">,</span> <span class="token keyword">long</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">double</span> pr <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u5B9A\u4E49\u6784\u9020\u51FD\u6570</span>
<span class="token class-name">Stock</span><span class="token double-colon punctuation">::</span><span class="token function">Stock</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span> co<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> pr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    company <span class="token operator">=</span> co<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;number of shares can&#39;t be negtive&quot;</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;company &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;shares set to 0.\\n &quot;</span><span class="token punctuation">;</span>
        shares <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
        shares <span class="token operator">=</span> n<span class="token punctuation">;</span>
    share_val <span class="token operator">=</span> pr<span class="token punctuation">;</span>
    <span class="token function">set_tot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">\u6784\u9020\u51FD\u6570\u7684\u53C2\u6570\u8868\u793A\u4E0D\u662F\u7C7B\u6210\u5458,\u800C\u662F\u8D4B\u7ED9\u7C7B\u6210\u5458\u7684\u503C,\u6240\u4EE5\u53C2\u6570\u540D\u4E0D\u80FD\u4E0E\u7C7B\u6210\u5458\u76F8\u540C</p></div><ol start="2"><li>\u4F7F\u7528\u6784\u9020\u51FD\u6570<br> \u5BF9\u8C61\u53EF\u4EE5\u8C03\u7528\u65B9\u6CD5\u4F46\u662F\u4E0D\u80FD\u8C03\u7528\u6784\u9020\u51FD\u6570,\u56E0\u4E3A\u5728\u6784\u9020\u51FD\u6570\u6784\u9020\u51FA\u5BF9\u8C61\u4E4B\u524D,\u5BF9\u8C61\u662F\u4E0D\u5B58\u5728\u7684,\u56E0\u6B64<strong>\u6784\u9020\u51FD\u6570\u88AB\u7528\u6765\u521B\u5EFA\u5BF9\u8C61,\u800C\u4E0D\u80FD\u901A\u8FC7\u5BF9\u8C61\u8C03\u7528</strong></li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">//\u663E\u5F0F\u8C03\u7528\u6784\u9020\u51FD\u6570</span>
Stock fu <span class="token operator">=</span> <span class="token function">Stock</span><span class="token punctuation">(</span><span class="token string">&quot;Furry Mason&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u9690\u5F0F\u8C03\u7528\u6784\u9020\u51FD\u6570</span>
Stock <span class="token function">fu</span><span class="token punctuation">(</span><span class="token string">&quot;Furry Mason&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u5C06\u6784\u9020\u51FD\u6570\u4E0Enew\u4E00\u8D77\u4F7F\u7528</span>
Stock <span class="token operator">*</span>pstock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Stock</span><span class="token punctuation">(</span><span class="token string">&quot;Furry Mason&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*\u521B\u5EFA\u4E00\u4E2AStock\u5BF9\u8C61\u5E76\u5C06\u521D\u59CB\u5316\u4E3A\u53C2\u6570\u63D0\u4F9B\u7684\u503C,\u5E76\u5C06\u8BE5\u5BF9\u8C61\u8D4B\u503C\u7ED9pstock\u6307\u9488,
\u5BF9\u8C61\u6CA1\u6709\u540D\u5B57\u4F46\u662F\u53EF\u4EE5\u7528\u6307\u9488\u6765\u7BA1\u7406*/</span>
</code></pre><div class="highlight-lines"><div class="highlight-line">\xA0</div><br><div class="highlight-line">\xA0</div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>\u9ED8\u8BA4\u6784\u9020\u51FD\u6570</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token class-name">Stock</span><span class="token double-colon punctuation">::</span><span class="token function">Stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>\u6790\u6784\u51FD\u6570<br><strong>\u5BF9\u8C61\u8FC7\u671F\u65F6,\u7A0B\u5E8F\u4F1A\u81EA\u52A8\u8C03\u7528\u6790\u6784\u51FD\u6570\u5B8C\u6210\u6E05\u7406\u5DE5\u4F5C</strong></li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u521B\u5EFA\u6790\u6784\u51FD\u6570--\u6790\u6784\u51FD\u6570\u4E0D\u627F\u62C5\u5DE5\u4F5C,\u6240\u4EE5\u53EF\u4EE5\u4E0D\u6267\u884C\u4EFB\u4F55\u64CD\u4F5C</span>
<span class="token comment">//\u901A\u5E38\u4E0D\u663E\u5F0F\u8C03\u7528\u6790\u6784\u51FD\u6570</span>
Stock<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//\u4E3A\u4E86\u770B\u6E05\u6790\u6784\u51FD\u6570\u4F55\u65F6\u88AB\u8C03\u7528</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Bye, &quot;</span> <span class="token operator">&lt;&lt;</span> company <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">C++11\u4E2D,\u53EF\u4EE5\u5C06\u5217\u8868\u521D\u59CB\u5316\u8BED\u6CD5\u7528\u4E8E\u7C7B</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Stock tip <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;NanoSmart&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">12.50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="this\u6307\u9488" tabindex="-1"><a class="header-anchor" href="#this\u6307\u9488" aria-hidden="true">#</a> this\u6307\u9488</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">//this\u6307\u9488\u58F0\u660E</span>
<span class="token keyword">const</span> Stock <span class="token operator">&amp;</span> <span class="token function">topval</span><span class="token punctuation">(</span><span class="token keyword">const</span> Stock <span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

<span class="token comment">//this\u6307\u9488:\u6307\u5411\u8C03\u7528\u6210\u5458\u51FD\u6570\u7684\u5BF9\u8C61</span>
<span class="token keyword">const</span> Stock <span class="token operator">&amp;</span> <span class="token class-name">Stock</span><span class="token double-colon punctuation">::</span><span class="token function">topval</span><span class="token punctuation">(</span><span class="token keyword">const</span> Stock <span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
<span class="token comment">//\u8FD9\u91CC\u9762\u7684total_val\u5176\u5B9E\u662F this-&gt;total_val</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>total_val <span class="token operator">&gt;</span> total_val<span class="token punctuation">)</span>
        <span class="token keyword">return</span> s<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">//  *this \u5F15\u7528\u6574\u4E2A\u8C03\u7528\u5BF9\u8C61</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5BF9\u8C61\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u5BF9\u8C61\u6570\u7EC4" aria-hidden="true">#</a> \u5BF9\u8C61\u6570\u7EC4</h3><p>\u521B\u5EFA\u4E00\u4E2A\u5BF9\u8C61\u6570\u7EC4</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Stock mystock<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,40);function W(j,D){const l=c("ExternalLinkIcon"),e=c("CodeGroupItem"),o=c("CodeGroup");return u(),r("div",null,[k,n("p",null,[n("a",v,[m,a(l)])]),b,a(o,null,{default:t(()=>[a(e,{title:"\u7A0B\u5E8F"},{default:t(()=>[h]),_:1}),a(e,{title:"\u8FD0\u884C\u7ED3\u679C"},{default:t(()=>[g]),_:1})]),_:1}),y,a(o,null,{default:t(()=>[a(e,{title:"\u7A0B\u5E8F"},{default:t(()=>[w]),_:1}),a(e,{title:"\u8FD0\u884C\u7ED3\u679C"},{default:t(()=>[f]),_:1})]),_:1}),_,n("p",null,[n("a",q,[x,a(l)]),S]),C,a(o,null,{default:t(()=>[a(e,{title:"\u7A0B\u5E8F"},{default:t(()=>[V]),_:1}),a(e,{title:"\u8FD0\u884C\u7ED3\u679C"},{default:t(()=>[E]),_:1})]),_:1}),F,a(o,null,{default:t(()=>[a(e,{title:"\u7A0B\u5E8F"},{default:t(()=>[z]),_:1}),a(e,{title:"\u8FD0\u884C\u7ED3\u679C"},{default:t(()=>[$]),_:1})]),_:1}),I,a(o,null,{default:t(()=>[a(e,{title:"\u7A0B\u5E8F"},{default:t(()=>[N]),_:1}),a(e,{title:"\u8FD0\u884C\u7ED3\u679C"},{default:t(()=>[A]),_:1})]),_:1}),P,a(o,null,{default:t(()=>[a(e,{title:"\u7A0B\u5E8F"},{default:t(()=>[M]),_:1}),a(e,{title:"\u8FD0\u884C\u7ED3\u679C"},{default:t(()=>[T]),_:1})]),_:1}),K,a(o,null,{default:t(()=>[a(e,{title:"\u7A0B\u5E8F"},{default:t(()=>[L]),_:1}),a(e,{title:"\u8FD0\u884C\u7ED3\u679C"},{default:t(()=>[O]),_:1})]),_:1}),Z,a(o,null,{default:t(()=>[a(e,{title:"\u7A0B\u5E8F"},{default:t(()=>[B]),_:1}),a(e,{title:"\u8FD0\u884C\u7ED3\u679C"},{default:t(()=>[H]),_:1})]),_:1}),R])}var Y=i(d,[["render",W],["__file","index.html.vue"]]);export{Y as default};
